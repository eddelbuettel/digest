{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"digest: Compact hash representations of arbitrary R objects Overview The digest package provides a principal function digest() for the creation of hash digests of arbitrary R objects (using the md5, sha-1, sha-256, crc32, xxhash, murmurhash, spookyhash, blake3, crc32c, xxh3_64, and xxh3_128 algorithms) permitting easy comparison of R language objects. Extensive documentation is available at the package documentation site . Examples As R can serialize any object, we can run digest() on any object: R> library(digest) R> digest(trees) [1] \"12412cbfa6629c5c80029209b2717f08\" R> digest(lm(log(Height) ~ log(Girth), data=trees)) [1] \"e25b62de327d079b3ccb98f3e96987b1\" R> digest(summary(lm(log(Height) ~ log(Girth), data=trees))) [1] \"86c8c979ee41a09006949e2ad95feb41\" R> By using the hash sum, which is very likely to be unique, to identify an underlying object or calculation, one can easily implement caching strategies. This is a common use of the digest package. Other Functions A small number of additional functions is available: sha1() for numerically stable hashsums, hmac() for hashed message authentication codes based on a key, AES() for Advanced Encryption Standard block ciphers, getVDigest() as a function generator for vectorised versions. Note Please note that this package is not meant to be deployed for cryptographic purposes. More comprehensive and widely tested libraries such as OpenSSL should be used instead. Installation The package is on CRAN and can be installed via a standard install.packages(\"digest\") Continued Testing As we rely on the tinytest package, the already-installed package can also be verified via tinytest::test_package(\"digest\") at any later point. Author Dirk Eddelbuettel, with contributions by Antoine Lucas, Jarek Tuszynski, Henrik Bengtsson, Simon Urbanek, Mario Frasca, Bryan Lewis, Murray Stokely, Hannes Muehleisen, Duncan Murdoch, Jim Hester, Wush Wu, Qiang Kou, Thierry Onkelinx, Michel Lang, Viliam Simko, Kurt Hornik, Radford Neal, Kendon Bell, Matthew de Queljoe, Ion Suruceanu, Bill Denney, Dirk Schumacher, Winston Chang, Dean Attali, and Michael Chirico. License GPL (>= 2)","title":"Hash arbitrary R objets"},{"location":"#digest-compact-hash-representations-of-arbitrary-r-objects","text":"","title":"digest: Compact hash representations of arbitrary R objects"},{"location":"#overview","text":"The digest package provides a principal function digest() for the creation of hash digests of arbitrary R objects (using the md5, sha-1, sha-256, crc32, xxhash, murmurhash, spookyhash, blake3, crc32c, xxh3_64, and xxh3_128 algorithms) permitting easy comparison of R language objects. Extensive documentation is available at the package documentation site .","title":"Overview"},{"location":"#examples","text":"As R can serialize any object, we can run digest() on any object: R> library(digest) R> digest(trees) [1] \"12412cbfa6629c5c80029209b2717f08\" R> digest(lm(log(Height) ~ log(Girth), data=trees)) [1] \"e25b62de327d079b3ccb98f3e96987b1\" R> digest(summary(lm(log(Height) ~ log(Girth), data=trees))) [1] \"86c8c979ee41a09006949e2ad95feb41\" R> By using the hash sum, which is very likely to be unique, to identify an underlying object or calculation, one can easily implement caching strategies. This is a common use of the digest package.","title":"Examples"},{"location":"#other-functions","text":"A small number of additional functions is available: sha1() for numerically stable hashsums, hmac() for hashed message authentication codes based on a key, AES() for Advanced Encryption Standard block ciphers, getVDigest() as a function generator for vectorised versions.","title":"Other Functions"},{"location":"#note","text":"Please note that this package is not meant to be deployed for cryptographic purposes. More comprehensive and widely tested libraries such as OpenSSL should be used instead.","title":"Note"},{"location":"#installation","text":"The package is on CRAN and can be installed via a standard install.packages(\"digest\")","title":"Installation"},{"location":"#continued-testing","text":"As we rely on the tinytest package, the already-installed package can also be verified via tinytest::test_package(\"digest\") at any later point.","title":"Continued Testing"},{"location":"#author","text":"Dirk Eddelbuettel, with contributions by Antoine Lucas, Jarek Tuszynski, Henrik Bengtsson, Simon Urbanek, Mario Frasca, Bryan Lewis, Murray Stokely, Hannes Muehleisen, Duncan Murdoch, Jim Hester, Wush Wu, Qiang Kou, Thierry Onkelinx, Michel Lang, Viliam Simko, Kurt Hornik, Radford Neal, Kendon Bell, Matthew de Queljoe, Ion Suruceanu, Bill Denney, Dirk Schumacher, Winston Chang, Dean Attali, and Michael Chirico.","title":"Author"},{"location":"#license","text":"GPL (>= 2)","title":"License"},{"location":"changelog/","text":"2024 2024-12-31 Bill Denney wdenney@humanpredictions.com * DESCRiPTION (Description): Correct typos * README.md: Idem * man/digest.Rd: Idem * sha1.Rd: Idem * vignette/sha1.md: Idem 2024-12-31 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Simplify to r-ci with included bootstrap 2024-09-19 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.h: introduced, to enable additional registrations in init.c * src/digest.c: add digest.h, prune other imports, eliminate version check * src/init.c: introduce digest.h in anticipation of new registrations 2024-08-28 Carl A. B. Pearson carl.ab.pearson@gmail.com * R/digest.R (digest): parse errormode only if in error conditions * R/vdigest.R (getVDigest): parse errormode only if in error conditions 2024-08-24 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Remove unused variables 2024-08-24 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.c (digest): Address signedness warnings 2024-08-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Add two more ORCID IDs 2024-08-22 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.c: switch output handling from macro to function; consolidate stringification loop approaches 2024-08-21 Dirk Eddelbuettel edd@debian.org * man/digest.Rd: Update \\code{raw} entry * DESCRIPTION (Authors@R): Add two more ORCID IDs 2024-08-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * DESCRIPTION (Authors@R): Add five ORCID IDs 2024-08-19 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.c: enable all hashing algorithms to return raw output. * inst/tinytest/test_raw.R: test raw vs not consistency for all algos. 2024-08-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.37 2024-08-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-08-15 Kevin Ushey kevinushey@gmail.com * src/raes.c: Calloc -> R_Calloc; Free -> R_Free 2024-07-15 Dirk Eddelbuettel edd@debian.org * README.md: Switch some URLs from http to https 2024-06-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.36 * src/digest.c (is_little_endian): Define alternate helper too * man/digest.Rd: Compare to spookyhash ref only on little endian 2024-06-22 Dirk Eddelbuettel edd@debian.org * src/digest.c (is_big_endian): Use endian-ness definition from Rconfig.h and define one-line helper * inst/tinytest/test_digest.R: Skip spookyhash test on big endian 2024-06-21 Sergey Fedorov vital.had@gmail.com * src/blake3.c: Upstream patch for big endian systems * src/blake3_impl.h: Idem * src/blake3_portable.c: Idem 2024-06-15 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to r-ci-setup action 2024-05-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * README.md: Use tinyverse.netlify.app for dependency badge * src/spooky_serialize.cpp: Several small updates to please clang++ * src/SpookyV2.cpp: Idem * .github/workflows/ci.yaml: Show logs in case of failure 2024-03-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * src/spooky_serialize.cpp: Use R_NO_REMAP, add three Rf_ prefixes 2024-03-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.35 * src/xxhash.h: Update to current release 0.8.2 * src/xxhash.c: Idem * src/digest.c: Support added xxhash algorithms xxh3_64 and xxh3_128 * R/digest.R: Idem * R/vdigest.R: Support xxh3_64 and xxh3_128 in vectorized mode * inst/tinytest/test_digest.R: Add tests for xxh3_64 and xxh3_128 * man/digest.Rd: Documentation * man/vdigest.Rd: Idem * DESCRIPTION (Description): Mention xxh3_64 and xxh3_128 * README.md: Idem * src/digest.c (digest): Consistently print uint64_t via PRIx 2024-01-11 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.34 2024-01-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4 2024-01-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * src/digest.c (open_with_widechar_on_windows): Correct format specification in error() call on Windows 2023 2023-08-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * DESCRIPTION: Add Michael contributors * README.md: Idem 2023-08-03 Michael Chirico chiricom@google.com * tests/tinytest.R: Define `expect_length()` if needed (it is only available from tinytest 1.4.1 released February 2023) * src/digest.c: `#include <stdint.h>` for `uint32_t` 2023-06-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.33 * src/crc32c/crc32c_config.h: Minor comment edit 2023-06-27 Sergey Fedorov vital.had@gmail.com * src/crc32c/crc32c_config.h: Use endian macros to set endianness 2023-06-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * src/crc32c/crc32c_config.h: Undefine HAVE_BUILTIN_PREFETCH and HAVE_MM_PREFETCH for maximum portability and builds on M1/M2/Arm64 2023-06-26 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.32 * README.md: Add r-universe badge * README.md: Add crc32c, and link to docs site, to Overview 2023-06-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * DESCRIPTION (Author): Add Dean Attali 2023-06-25 Dean Attali daattali@gmail.com * R/AES.R: Add `padding` parameter to `AES()` to allow CBC mode to use PKCS#7 padding * inst/tinytest/test_aes.R: Add tests for new `padding` parameter * man/AES.Rd: Document the `raw` argument of `AES()$decrypt()` and the new `padding` parameter 2023-04-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * R/vdigest.R: Enable vectorised operation for blake3 and crc32v * man/vdigest.Rd: Update documentation 2023-04-29 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Support crc33c * man/digest.Rd: Document crc32c option, add two examples * src/crc32c.h: Adding new CRC32C implementation * src/crc32c.cpp: Idem * src/crc32c_portable.cpp: Idem; also added codecov nocov * src/crc32c/*: Idem * src/Makevars: Added for PKG_CPPFLAGS * src/Makevars.win: Idem * R/init.R: Added some codecov nocov * .codecov.yml (coverage): Added coverage diff settings 2023-02-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/Makevars: No longer require CXX_STD 2022 2022-12-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.31 * src/digest.c: Replace sprintf with snprintf * .editorconfig: Added * .Rbuildignore: Updated 2022-11-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3 2022-10-17 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.30 * src/crc32.c: Modernize three function signatures to current C standards to appease clang-15 now used by CRAN * src/sha2.c (SHA512_End): Align two function signatures to their prototypes to appease gcc-12 2022-10-02 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/index.md: Several small updates with upgrade to Material for MkDocs 8.5.5 2021 2021-11-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.29 * src/digest.c (digest): Accomodate Windows UCRT build * man/AES.Rd: Remove one URL that upsets the URL checker * README.md: Update one URL that upsets the URL checker 2021-11-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * vignettes/sha1.md: Renamed from .Rmd, corrected code block syntax 2021-11-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (VignetteBuilder): Converted to simplermarkdown engine * vignettes/sha1.Rmd: Idem * vignettes/water.css: Added 2021-11-05 Dirk Eddelbuettel edd@debian.org * README.md: Remove Travis badge * .travis.yml: Remove Travis YAML config 2021-09-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.28 2021-09-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * vignettes/sha1.Rmd (date): Remove knitr date calculation in YAML header which GitHub does not like and mistakes for Jekyll code * docs/mkdmt-src/src/vignette.md (date): Idem * README.md: Add total download badge, label other as monthly 2021-09-22 Andr\u00e1s Svraka svraka.andras@gmail.com * R/vdigest.R (non_streaming_digest): Ensure UTF-8 encoded file paths on Windows * inst/tinytest/test_encoding.R: Expand test coverage for path name encodings on Windows 2021-03-28 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/: Moved mkdocs-material input 2021-03-26 Dirk Eddelbuettel edd@debian.org * README.md: Add 'last commit' badge 2021-03-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (URL): Add link to repo 2021-03-22 Dirk Eddelbuettel edd@debian.org * docs-src/mkdocs.yml (theme): Add (draft, incomplete) vignette * docs-src/src/vignette.md (title): Idem 2021-03-22 Floris Vanderhaeghe floris.vanderhaeghe@inbo.be * man/digest.Rd: Reworded to also highlight file mode 2021-01-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/SpookyV2.cpp: Disallow unaligned reads which have been seen to trigger SAN issues as reported by Winston in #167 2020 2020-12-23 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Add CI runner using r-ci * README.md: Add new CI badge 2020-10-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.27 2020-10-19 Dirk Eddelbuettel edd@debian.org * src/blake3_dispatch.c: Comment-out include of intrinsics to also comment-out erroring on insufficient architectures such as Solaris 2020-10-17 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.26 * docs/: Added package website * docs-src/: Added package website inputs * .travis.yml (dist): Change to focal 2020-10-15 Dirk Eddelbuettel edd@debian.org * README.md: Update URLs * man/digest.Rd: Ditto * man/hmac.Rd: Ditto 2020-10-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/tinytest/test_blake3.R: Skip file-based blake3 tests on Windows * vignettes/sha1.Rmd: Switch to minidown and 'framework: water' * DESCRIPTION (Suggests): Add minidown 2020-10-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-10-06 Winston Chang winston@stdout.org * R/digest.R: Speedup via explicit alternative values for match.arg() and a direct call to serialize() * R/vdigest.R: Idem * R/init.R: Idem (for serialize()) * inst/tinytest/test_digest.R: New test ensuring all variants hit 2020-09-21 Dirk Eddelbuettel edd@debian.org * .travis.yml: Updated to 'bionic', R 4.0, and BSPM 2020-08-03 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Depends): Roll Depends: on to R (>= 3.3.0) due to use of startsWith(), with thanks to Florian Pein 2020-05-20 Dirk Eddelbuettel edd@debian.org * .travis.yml: Switch to bionic and R 4.0.0 2020-05-19 Dirk Schumacher mail@dirk-schumacher.net * src/digest.c: Support file operation * inst/tinytest/test_blake3.R: Update test 2020-05-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Roll minor version and date 2020-05-19 Dirk Schumacher mail@dirk-schumacher.net * src/blake3.c: Add blake3 implementation * src/blake3.h: Idem * src/blake3_dispatch.c: Idem * src/blake3_impl.h: Idem * src/blake3_portable.c: Idem * src/digest.c: Support blake3 call * R/digest.R: Idem * inst/tinytest/test_blake3.R: Add tests * man/digest.Rd: Add documentation 2020-03-05 Harris McGehee mcgehee.harris@gmail.com * man/sha1.Rd: Correct typo 2020-02-26 Dirk Eddelbuettel edd@debian.org * README.md: Add Debian badge 2020-02-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.25 2020-02-15 Kendon Bell bellk@landcareresearch.co.nz * R/digest.R: Complete call to spookyhash 2020-02-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.24 2019 2019-12-12 Thierry Onkelinx thierry.onkelinx@inbo.be * DESCRIPTION (Version, Date): Roll minor version * R/sha1.R: ignore the \"srcref\" attribute if set * inst/tinytest/test_new_matrix_behaviour.R: update unit test * inst/tinytest/test_sha1.R: update unit test * man/sha1.Rd: update documentation 2019-12-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/init.c: Do not register a .Call method for PMurHash 2019-12-05 Will Landau will.landau@gmail.com * R/init.R (.onLoad): Cache nosharing state in base::serialize (.hasNoSharing): Return cached value * R/digest.R (digest): Use cached value accessor * R/vdigest.R (non_streaming_digest): Use cached value accessor 2019-12-04 Dirk Eddelbuettel edd@debian.org * R/init.R (.onLoad): Cache isWindows state (.isWindows): Return cached value * R/digest.R (digest): Use cached value accessor 2019-11-23 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_new_matrix_behaviour.R: Split off tests affected by new matrix/array behavior in R-devel (i.e. future R 4.0.0) 2019-11-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.23 * inst/tinytest/test_sha1.R: Uncomment several tests which failed under r-devel on Linux at CRAN 2019-11-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2019-11-11 Bill Denney wdenney@humanpredictions.com * R/sha1.R: Increase efficiency of num2hex() 2019-11-07 Bill Denney wdenney@humanpredictions.com * NAMESPACE: add sha1_digest() and sha1_attr_digest() functions * R/sha1.R: Idem * man/sha1.Rd: Idem * Also, renamed sha1.rd to sha1.Rd 2019-11-03 Bill Denney wdenney@predictions.com * R/sha1.R: Add support for the \"(\" class used in some formulae * NAMESPACE: Idem * man/sha1.Rd: Idem; also corrected typo for old version behavior * inst.tinytest/test_sha1.R: Add tests for the \"(\" class 2019-10-27 Thierry Onkelinx thierry.onkelinx@inbo.be * DESCRIPTION (Version, Date): Roll minor version * R/sha1.R: consider object attributes when calculating the hash * man/sha1.Rd: update documentation * R/init.R: add \"sha1PackageVersion\" option * inst.tinytest/test_sha1.R: add units tests for new functionality * NAMESPACE: import utils::packageVersion 2019-10-26 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/digest.R (digest): Call enc2utf8() only on Windows; add internal one-liner function to test for being on Windows 2019-10-23 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_encoding.R: Skip test unless on Windows 2019-10-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.22 2019-10-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/tinytest/test_misc.R: File split off test_digest.R 2019-10-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Add Ion and Bill to Authors * README.md: Idem 2019-10-13 Jim Hester james.f.hester@gmail.com * src/digest.c: Add support for UTF-8 file paths on Windows * R/digest.R: Idem * inst/tinytest/test_encoding.R: Add tests for UTF-8 file paths. 2019-10-13 Bill Denney wdenney@humanpredictions.com * R/sha1.R: Add sha1.formula() * NAMESPACE: Idem * man/sha1.rd: Idem * inst/tinytest/test_sha1.R: Add tests for sha1.formula() 2019-10-12 Bill Denney wdenney@humanpredictions.com * R/sha1.R: Fix issue with num2hex() and input of Inf * inst/tinytest/test_sha1.R: Add Inf to the tests 2019-10-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * man/digest.Rd: Change three URL references to https * man/hmac.Rd: Ditto * R/utils.R: Move back functions used by digest() + makeVDigest() * R/AES.R: Added copyright header * R/digest.R: Idem * R/hmac.R: Idem * R/sha1.R: Idem * R/vdigest.R: Idem 2019-10-02 Ion Suruceanu ion.suruceanu@gapsquare.com * R/AES.R: Add support for CFB cipher mode * man/AES.Rd: Add documentation * inst/tinytest/test_aes.R: Add tests 2019-09-20 Matthew de Queljoe matthew.dequeljoe@gmail.com * R/digest.R: refactor digest function * R/vdigest.R: remove helper functions from file * R/utils.R: new file to hold helper functions 2019-09-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.21 2019-09-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (Author): Add Matthew * README.md (Author): Ditto * demo/vectorised.R: Add demo (based on Matthew's PR) * R/vdigest.R: Added a handful of #nocov tags * man/vdigest.Rd: Break up two long lines 2019-09-17 Matthew de Queljoe matthew.dequeljoe@gmail.com * src/digest.c: Add vectorised digest function * R/vdigest.R: Add vectorised digest function factory * man/vdigest.Rd: Add documentation * NAMESPACE: Export new function getVDigest * inst/tinytest/test_digest.R: Add tests 2019-07-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.20 2019-06-29 Dirk Eddelbuettel edd@debian.org * README.md: Add installation and continues testing sections * .travis.yml (install): Use r-cran-tinytest from PPA 2019-06-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/tinytest/test_num2hex.R: Quieter with sapply * test/tinytest/test_aes.R: renamed from testAES.R * test/tinytest/test_crc32.R: renamed from testCRC32.R * test/tinytest/test_digest.R: renamed from testDigest.R * test/tinytest/test_digest2int.R: from testDigest2Int.R * test/tinytest/test_hmac.R: renamed from testHMAC.R * test/tinytest/test_num2hex.R: renamed from testNum2Hex.R * test/tinytest/test_raw.R: renamed from testRaw.R * test/tinytest/test_sha1.R: renamed from testSHA1.R 2019-06-10 Dirk Eddelbuettel edd@debian.org * inst/tinytest/testCRC32.R: Use expcect_* functions * inst/tinytest/testDigest2Int.R: Idem * inst/tinytest/testNum2Hex.R: Idem * inst/tinytest/testRaw.R: Idem 2019-05-26 Dirk Eddelbuettel edd@debian.org * tests/tinytest.R: New test driver using tinytest * DESCRIPTION (Suggests): Added tinytest * .travis.yml (install): Install tinytest * inst/tinytest/testRaw.R: Converted from tests/raw.R * inst/tinytest/testCRC32.R: Converted from tests/crc32.R * inst/tinytest/testDigest2Int.R: From tests/digest2int.R * inst/tinytest/testNum2Hex.R: From tests/num2hexTest.R * inst/tinytest/testSHA1.R: Converted from tests/sha1Test.R * inst/tinytest/testHMAC.R: Converted from tests/hmacTest.R * inst/tinytest/testAES.R: Converted from tests/aesTest.R * inst/tinytest/testDigest.R: From tests/digestTest.R * R/AES.R: Additional #nocov tags * R/digest.R: Idem * R/hmac.R: Idem * R/sha1.R: Idem 2019-05-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.19 * src/SpookyV2.cpp: Add some #nocov tags 2019-05-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * tests/digestTest.Rout.save: Updated reference output 2019-05-12 Kendon Bell bellk@landcareresearch.co.nz * R/digest.R: Account for 'skip' bytes for streaming algos * tests/digestTest.R: Adjust test for streaming_algos 2019-05-09 Dirk Eddelbuettel edd@debian.org * src/Makevars: Added to ensure C++11 compilation standard * cleanup: Do not delete src/Makevars now that we have one * tests/digestTest.Rout.save: Updated reference output 2019-05-06 Dirk Eddelbuettel edd@debian.org * README.md: Mention spookyhash and Kendon * DESCRIPTION (Description): Mention spookyhash 2019-05-04 Kendon Bell bellk@landcareresearch.co.nz * tests/digestTest.R: Added more tests * src/spooky_serialize.cpp: Added copyright header 2019-05-04 Dirk Eddelbuettel edd@debian.org * R/digest.R: Add some #nocov tags * src/SpookyV2.h: Idem * src/SpookyV2.cpp: Idem * src/spooky_serialize.cpp: Idem 2019-05-03 Dirk Eddelbuettel edd@debian.org * tests/digestTest.Rout.save: Updated reference output 2019-04-30 Kendon Bell bellk@landcareresearch.co.nz * digest.R: Support spookyhash * src/SpookyV2.h: Idem * src/SpookyV2.cpp: Idem * src/spooky_serialize.cpp: Idem * man/digest.Rd: Document spookyhash 2019-04-23 Kendon Bell bellk@landcareresearch.co.nz * src/digest.c: Switch length counter to R_xlen_t 2018 2018-12-23 Dirk Eddelbuettel edd@debian.org * NAMESPACE: Add .registration=TRUE to useDynLib() 2018-11-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2018-11-08 Dmitriy Selivanov selivanov.dmitriy@gmail.com * src/digest2int.c: Removed (bad) redefinition of uint32_t * tests/digest2intTest.R: Additional test 2018-10-29 Dmitriy Selivanov selivanov.dmitriy@gmail.com * DESCRIPTION (Version, Date): minor version * digest2int.R (digest2int): added digest2int * src/digest2int.c (digest2int): added Bob Jenkins `one_at_a_time` function for hashing arbitrary character vectors to integer vectors 2018-10-18 Dirk Eddelbuettel edd@debian.org * README.md: Added dependencies badge 2018-10-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.18 2018-09-16 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Six more #nocov tags * README.md: Small edits 2018-09-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/sha2.c: Explicitly #undef SHA256_ and SHA384_ functions not used from this file 2018-09-13 Radford Neal radfordneal@gmail.com * src/pmurhash.c (DOBYTES): Explicit cast to uint32_t avoids UBSAN 2018-09-13 Jim Hester james.f.hester@gmail.com * src/xxhash.c: Updated to use xxHash v0.6.5 * src/xxhash.h: Ditto * src/digest.c: Ditto 2018-09-11 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.17 2018-09-02 Dirk Eddelbuettel edd@debian.org * .travis.yml: Simplified as covr can be installed from c2d4u 2018-08-30 Radford Neal radfordneal@gmail.com * src/sha2.c: Memory alignment changes motivated by 32bit sparc * src/sha2.h: Ditto 2018-08-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.16 2018-08-20 Dirk Eddelbuettel edd@debian.org * tests/digestTest.Rout: Skip one test which creates different results across versions and operating systems * tests/digestTest.Rout.save: Ditto 2018-08-19 Dirk Eddelbuettel edd@debian.org * tests/hmacTest.R: Added raw test * tests/hmacTest.Rout.save: Updated reference output accordingly * tests/raw.R: Added test for 'raw' vector input to sha1() * R/sha1.R: Removed no longer needed #nocov tags 2018-07-21 Henrik Bengtsson hb@aroma-project.org * DESCRIPTION: digest (>= 0.6.14) requires R (>= 3.0.3) 2018-06-30 Dirk Eddelbuettel edd@debian.org * tests/crc32.R: Added test for crc32 and old versus new formats * tests/raw.R: Added small test file for raw tests 2018-06-29 Dirk Eddelbuettel edd@debian.org * R/init.R: Provide option 'digestOldCRC32Format' which if TRUE returns without zero padding which can be shorter than eight bytes * R/digest.R: If crc32 selected and option set, return in old format * man/digest.Rd: Document new option 2018-06-28 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Change print format for crc32 to always return eight characters and no longer drop leading zeros (thanks to Henrik Bengtsson for the heads-up) 2018-06-21 Dirk Eddelbuettel edd@debian.org * tests/sha1Test.R: Do not run test using serialize() as its output always reflects the R version used (thanks, Radford Neal) 2018-01-29 Dirk Eddelbuettel edd@debian.org * src/sha2.c: Comment-out three unused 'const static' variables 2018-01-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.15 * R/sha1.R (sha1.POSIXlt): Unclass POSIXlt objects as suggested by Kurt Hornik to accomodate R-devel changes * tests/sha1Test.R: Condition one sha1 test seemingly affected by R-devel serialization changes to run only with R < 3.5.0 2018-01-21 Thierry Onkelinx thierry.onkelinx@inbo.be * sha1() gains an `algo` argument * sha1() handles raw class 2018-01-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.14 * man/AES.Rd: Use https for nist.gov reference * man/digest.Rd: Idem * man/hmac.Rd: Idem * man/digest.Rd: Use Wikiepedia page as reference for SHA1 as the reference page at NIST has (long) vanished. * man/hmac.Rd: Idem 2018-01-12 Thierry Onkelinx thierry.onkelinx@inbo.be * sha1() handles empty matrices 2017 2017-12-20 Dirk Eddelbuettel edd@debian.org * src/raes.c (AESencryptECB,AESdecryptECD): Replace two uses of NAMED with MAYBE_REFERENCED 2017-12-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.13 2017-12-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * R/digest.R: Support serializeVersion format * man/digest.Rd: Document new option * R/init.R: Set a default version, and internal getter function 2017-10-12 Chris Muir chrismuirRVA@gmail.com * vignette/sha1.Rmd: Correct simple typo 2017-11-16 Moritz Beller Inventitech@users.noreply.github.com * man/digest.Rd: Replace old Google Code URLs with GitHub ones 2017-02-20 Dirk Eddelbuettel edd@debian.org * man/digest.Rd: Expand example section with a Vectorize() use 2017-01-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * man/digest.Rd: Note that support for 'raw' is not available for all hashing algorithms * .travis.yml (before_install): Use https for curl fetch 2017-01-26 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.12 2017-01-23 Thierry Onkelinx thierry.onkelinx@inbo.be * NAMESPACE: export sha1.function() and sha1.call() * R/sha1.R: - sha1() gains methods for the class \"function\" and \"call\" - sha1() gains a ... argument, currently only relevant for \"function\" - sha1() takes arguments into account for hash for complex, Date and array. Note that this will lead to different hasheS for these classes and for objects containing these classes * man/sha1.rd: update helppage for sha1() * tests/sha1Test.R: update unit tests for sha1() 2017-01-01 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.11 * R/sha1.R (sha1.anova): Added more #nocov marks * src/sha2.c (SHA256_Transform): Idem * tests/AESTest.R (hextextToRaw): Print AES object * tests/AESTest.Rout.save: Updated 2016 2016-12-08 Dirk Eddelbuettel edd@debian.org * NAMESPACE: Register (and exported) makeRaw S3 methods * man/makeRaw.Rd: New manual page * tests/hmacTest.R: Direct call to makeRaw() * tests/hmacTest.Rout.save: Ditto * src/digest.c: Additional #nocov tags * src/xxhash.c: Ditto 2016-12-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Rolled minor version * README.md: Use shields.io badge for codecov * R/digest.R: Additional #nocov tags * src/sha2.c: Ditto * src/raes.c: Ditto * tests/hmacTest.R: Additional tests * tests/hmacTest.Rout.save: Ditto 2016-11-30 Dirk Eddelbuettel edd@debian.org * .travis.yml (before_install): Activate PPA as we (currently) need an updated version of (r-cran)-covr to run coverage * tests/load-unload.R: Comment-out for now as it upsets coverage * tests/digestTest.R: Test two more algorithms * tests/digestTest.Rout.save: Updated reference output * R/digest.R: Added #nocov tags * R/zzz.R (.onUnload): Ditto * src/crc32.c: Ditto * src/pmurhash.c: Ditto * src/raes.c: Ditto * src/sha2.c: Ditto * src/xxhash.c: Ditto 2016-11-26 Dirk Eddelbuettel edd@debian.org * .travis.yml (after_success): Integrated Jim Hester's suggestion of activating code coverage sent many moons ago (in PR #12) * .codecov.yml (comment): Added * .Rbuildignore: Exclude .codecov.yml * README.md: Added code coverage badge 2016-10-16 Dirk Eddelbuettel edd@debian.org * R/digest.R (digest): Support 'nosharing' option of base::serialize as suggested by Radford Neal whose pqR uses this 2016-08-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (License): Now GPL (>= 2), cf issue 36 on GH * README.md: Updated badge accordingly 2016-08-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.6.10 * DESCRIPTION (Description): Shortened to one paragraph * DESCRIPTION (BugReports): URL to GH issues added * .travis.yml: Rewritten for run.sh from forked r-travis 2016-07-12 Henrik Bengtsson hb@aroma-project.org * src/digest.c: Correct bug with skip and file parameter interaction * tests/digestTest.R: Test code * tests/digestTest.Rout.save: Test reference output * R/zzz.R: Allow for unloading of shared library * tests/load-unload.R: Test code * DESCRIPTION: Rolled minor Version and Date 2016-05-25 Thierry Onkelinx thierry.onkelinx@inbo.be * R/sha1.R: Support for pairlist and name * tests/sha1Test.R: Support for pairlist and name * man/sha1.Rd: Support for pairlist, name, complex, array and Date * NAMESPACE: Support for pairlist, name and array * DESCRIPTION: bump version number and date 2016-05-01 Viliam Simko viliam.simko@gmail.com * R/sha1.R: Support for complex, Date and array * tests/sha1Test.R: Ditto * NAMESPACE: Ditto 2016-04-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Author): Add Qiang Kou to Authors * README.md: Ditto 2016-01-25 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Use XLENGTH if R >= 3.0.0 (issue #29) 2016-01-11 Thierry Onkelinx thierry.onkelinx@inbo.be * R/sha1.R: handle empty list and empty dataframe (#issue 27); take the object class, digits and zapsmall into account (#PR 28) * vignettes/sha1.Rmd: Small edits to reflect changes is sha1() 2016-01-09 Michel Lang michellang@gmail.com * R/sha1.R: Add a length check to sha1(), use vapply() 2016-01-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.9 * DESCRIPTION (Date): Bumped Date: to current date 2016-01-06 Dirk Eddelbuettel edd@debian.org * vignettes/sha1.Rmd: Small edits 2016-01-06 Thierry Onkelinx thierry.onkelinx@inbo.be * R/sha1.R: Add functions to calculate stable SHA1 with floating points * man/sha1.Rd: Add helpfile for sha1() * tests/num2hexTest.R: unit tests for num2hex() (non exported function) * tests/sha1Test.R: unit tests for sha1() * NAMESPACE: Export sha1 and its methods * DESCRIPTION: Add Thierry Onkelinx as contributor, bump Version and Date * README.md: Add Thierry Onkelinx as contributor * vignette/sha1.Rmd: Added * .travis.yml: Added 'sudo: required' per recent Travis changes 2015 2015-10-14 Dirk Eddelbuettel edd@debian.org * man/digest.Rd: Remove references to inaccessible web pages * man/hmac.Rd: Ditto 2015-10-13 Dirk Eddelbuettel edd@debian.org * src/digest.c: Use uint32_t instead of int for nchar 2015-10-12 Qiang Kou qkou@umail.iu.edu * src/digest.c: Use XLENGTH instead of LENGTH (PR #17, issue #16) 2015-08-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Title): Updated now stressing 'compact' over 'crypto' 2014 2014-12-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.8 * DESCRIPTION (Date): Bumped Date: to current date 2014-12-29 Dirk Eddelbuettel edd@debian.org * inst/include/pmurhashAPI.h: Added HOWTO comment to top of file 2014-12-26 Dirk Eddelbuettel edd@debian.org * src/pmurhash.c: Protect against _BIG_ENDIAN defined but empty * inst/include/pmurhash.h: Consistent four space indentation 2014-12-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Bump Date: and Version: * src/init.c: Minor edit and removal of unused headers 2014-12-25 Wush Wu wush978@gmail.com * inst/include/pmurhash.h: Export function * src/init.c: Register function for use by other packages 2014-12-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.7 * DESCRIPTION (Date): Bumped Date: to current date 2014-12-19 Dirk Eddelbuettel edd@debian.org * cleanup: Also remove src/symbols.rds * src/sha2.c: Apply (slightly edited) patch from https://www.nlnetlabs.nl/bugs-script/attachment.cgi?id=220&action=diff to overcome the strict-aliasing warning * src/digest.c: Use inttypes.h macro PRIx64 only on Windows 2014-12-16 Dirk Eddelbuettel edd@debian.org * src/xxhash.c: Remove two semicolons to make gcc -pedantic happy * tests/digestTest.Rout.save: Updated reflecting murmurHash test * src/pmurhash.c: Renamed from PMurHash.c for naming consistency * src/pmurhash.h: Renamed from PMurHash.h for naming consistency 2014-12-16 Jim Hester james.f.hester@gmail.com * src/digest.c: murmurHash implementation * tests/digestTest.R: murmurHash implementation * R/digest.R: murmurHash implementation * src/PMurHash.c: murmurHash implementation * src/PMurHash.h: murmurHash implementation 2014-12-10 Dirk Eddelbuettel edd@debian.org * src/xxhash.c: Applied pull request #6 by Jim Hester with updated upstream code and already corrected UBSAN issue identified by CRAN 2014-12-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.6 * DESCRIPTION (Date): Bumped Date: to current date * src/digest.c: Applied pull request #5 by Jim Hester providing portable integer printing inttypes.h header 2014-12-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.5 * DESCRIPTION (Date): Bumped Date: to current date * NAMESPACE: Expanded useDynLib() declaring C level symbols, in particular using digest_impl to for the C-level digest * R/AES.R: Use R symbols from NAMESPACE declaration in .Call() * R/digest.R: Use R symbol digest_impl to load C level digest 2014-12-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Edited Title and Description * R/digest.R: Added GPL copyright header, reindented to four spaces * src/digest.c: Reindented to four spaces * R/AES.R: Reindented to four spaces * R/hmac.R: Reindented to four spaces 2014-12-06 Dirk Eddelbuettel edd@debian.org * src/digest.c: Updated GPL copyright header * src/xxhash.c: Removed two spurious ';' * man/digest.Rd: Document 'seed' argument in \\usage * tests/digest.Rout.save: Updated for expanded tests * DESCRIPTION: Add Jim Hester to list of Authors 2014-12-05 Dirk Eddelbuettel edd@debian.org * R/digest.R: Applied pull request #3 by Jim Hester with support for xxHash (https://code.google.com/p/xxhash/) * src/digest.c: Ditto * src/xxhash.c: xxHash implementation supplied as part of #3 * src/xxhash.h: xxHash implementation supplied as part of #3 * R/digest.R: Applied pull request #4 by Jim Hester with expanded support for xxHash providing xxhash32 and xxhash64 * src/digest.c: Ditto * man/digest.Rd: Added documentation for xxHash, corrected typos * src/digest.R: New support for a seed parameter used by xxHash * tests/digestTest.R: Added tests for xxHash 2014-08-15 Dirk Eddelbuettel edd@debian.org * R/hmac.R: Applied (slightly edited) patch for crc32 computation of hmac kindly supplied by Suchen Jin 2013 2013-12-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.4 * src/sha2.h (BYTE_ORDER): Define BYTE_ORDER unless already defined, rely on Rconfig.h which itself goes back to an R compile-time test 2013-02-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.3 2013-02-06 Hannes M\u00fchleisen hannes@cwi.nl * R/hmac.R: Fixed hmac for sha512 hashes * tests/hmacTest.R: Added test cases for hmac with sha512 * tests/hmacTest.Rout.save: Updated accordingly 2013-01-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.2 * man/AES.Rd: Switch from paste0() to paste() to permit use on R-oldrelease as per email by Uwe Ligges * tests/AESTest.R: Idem * tests/AESTest.Rout.save: Updated accordingly 2013-01-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.1 * inst/GPL-2: Added as a fixed reference input for regression tests via the scripts in tests/ as the versions installed by R differ across OS and installations * tests/digestTest.R: No longer rely on file.path(R.home(),\"COPYING\") but rather use our own copy of GPL-2; ensure final test does not print * tests/digestTest.Rout.save: Updated accordingly 2013-01-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors): Added Duncan Murdoch 2013-01-19 Duncan Murdoch murdoch.duncan@gmail.com * src/aes.c: Devine's AES implementation added * src/aes.h: header for AES implementation * src/raes.c: interface to it * R/AES.R: Add AES object to do AES encryption * tests/AESTest.R: tests from the standards documents * man/AES.Rd: document AES object * NAMESPACE: export AES constructor and print method 2012 2012-11-25 Dirk Eddelbuettel edd@debian.org * Release 0.6.0 * src/sha2.h: In order to build on Windows: - Include the newer header file stdint.h - Enforce standard integer types by defining SHA2_USE_INTTYPES_H - Define BYTE_ORDER and default to LITTLE_ENDIAN * src/digest.c: Use uint8_t from stdint.h for sha256 2012-11-24 Dirk Eddelbuettel edd@debian.org * src/digest.c: Allow for extra null character in output[] vector * tests/digestTest.Rout.save: Update/Revert a change by Hannes; Naturally we do not get a single set that works for R-release and R-devel. Sigh. 2012-11-24 Hannes M\u00fchleisen hannes@cwi.nl * src/digest.c: sha-512 integration * src/sha2.h: Header file for Aaron Gifford's SHA2 implementation * src/sha2.c: Aaron Gifford's sha2 implementation * R/digest.R: enabled new sha-512 algorithm parameter * R/hmac.R: enabled new sha-512 algorithm parameter * man/digest.Rd: documented new sha-512 algorithm parameter * man/hmac.Rd: documented new sha-512 algorithm parameter * tests/digestTest.R: Added sha-512 test cases 2012-03-14 Dirk Eddelbuettel edd@debian.org * Release 0.5.2 * Applied patch by Murray Stokely: - R/digest.R: Additional test for file accessibility; segfault can happen if inaccesible file passed down - tests/digestTest.R: New test which leads to segfault in unpatched package, and passes with these changes - src/digest.c: Simpler use of error() via format string * DESCRIPTION: Fixed one typo in extended description * tests/digest.Rout.save: Updated to current output; version 0.5.1 created the same difference so it is presumably once again something that changed in R's serialization. Oh, and R-devel changes it again. 2011 2011-09-20 Dirk Eddelbuettel edd@debian.org * Release 0.5.1 * tests/digestTest.Rout.save: Updated reference output too 2011-09-18 Bryan Lewis blewis@illposed.net * tests/digestTest.R: Added basic raw output md5 and sha1 tests 2011-09-14 Dirk Eddelbuettel edd@debian.org * src/digest.c: Applied patch contributed by Bryan Lewis which supports output of unmodified raw binary output if a new function parameter 'raw' (which defaults to FALSE) is set to TRUE * R/digest.R: Support new parameter 'raw' * man/digest.Rd: Document new parameter 'raw' 2011-05-29 Dirk Eddelbuettel edd@debian.org * Release 0.5.0 2011-05-26 Dirk Eddelbuettel edd@debian.org * R/hmac.R: Switched to camelCase identifiers after discussion with Henrik and Mario 2011-05-25 Dirk Eddelbuettel edd@debian.org * R/hmac.R: New hmac() function contributed by Mario Frasca * man/hmac.Rd: Documentation contributed by Mario Frasca * tests/hmacTest.R: Added a new regression test file for hmac() * tests/hmacTest.Rout.save: Added new reference output * tests/digestTest.Rout.save: Updated reference digest output for simple R structure to match what R 2.13.0 yields * inst/ChangeLog: moved to ChangeLog (in top-level directory) * INDEX: removed, as no longer needed 2009 2009-12-03 Henrik Bengtsson henrikb@braju.com * Release 0.4.2 * R/digest.R: Bug fix - digest(object, file=TRUE) where object is a directory would cause R to crash. Now it gives an error. 2009-10-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: set SVN properties Date and Id, fix indentation 2009-09-24 Dirk Eddelbuettel edd@debian.org * Release 0.4.1 * src/Makefile.win: Removed as package builds on Windows without it but not with it being present * src/digest.c: Updated Copyright years, set SVN properties Date and Id * R/digest.R: Idem * man/digest.Rd: Idem 2009-09-23 Dirk Eddelbuettel edd@debian.org * Release 0.4.0 * src/sha256.c: Added sha-256 implementation by Christophe Devine as found (via Google Code Search) in a number of Open Source projects such as mushclient, aescrypt2, scrypt, and ipanon * src/sha256.h: Idem * src/digest.c: Modified to support SHA-256 * R/digest.R: Idem * man/digest.Rd: Idem, also added more references * src/Makefile.win: Updated for SHA-256, and generally spruced up 2007 2007-09-28 Dirk Eddelbuettel edd@debian.org * Release 0.3.1 * DESCRIPTION: Switched to standardised form 'GPL-2' for License: * src/digest.c: Added one explicit (char *) cast 2007-04-27 Dirk Eddelbuettel edd@debian.org * Release 0.3.0 * R/digest.R: Adopted two more changes suggested by Henrik 2007-03-12 Dirk Eddelbuettel edd@debian.org * R/digest.R: Adopted a few changes suggested by Henrik 2007-03-09 Dirk Eddelbuettel edd@debian.org - R/digest.R, man/digest.Rd, Applied two more patches by Simon Urbanek that clean object mangling (for better comparison across R versions, adds an ascii flag, adds skip=\"auto\" support to by pass the version header info, and clean the file option interface. This effectively replaces Henrik's patch relative to the 0.2.3 release. Thanks for the patches, Simon! - tests/digestTest.Rout.save: New reference output; one line changed 2007-03-08 Dirk Eddelbuettel edd@debian.org - R/digest.R, man/digest.Rd, src/digest.C: Applied two patches by Simon Urbanek to help improve consistence of digest output across different R versions by allowing digest to 'skip' a certain number of bytes; and by adding support for 'raw' serialization input 2007-01-08 Dirk Eddelbuettel edd@debian.org - R/digest.R: Added improvement suggested by Henrik 2006 2006-12-30 Dirk Eddelbuettel edd@debian.org * Release 0.2.3 - R/digest.R: Added file.expand() around filename 2006-07-28 Dirk Eddelbuettel edd@debian.org * Release 0.2.2 - R/digest.R: Added patch for R 2.4.0 by Henrik Bengtsson - tests/: Added simple unit tests 2005 2005-11-02 Dirk Eddelbuettel deddelbu@lx-chprd97.wfg.com * Release 0.2.1 - R/digest.R, src/digest.c, man/digest.Rd: add support for file mode based on a complete set of patches by Jarek Tuszynski 2005-04-06 Dirk Eddelbuettel edd@debian.org * Release 0.2.0 - R/digest.R, src/digest.c, man/digest.Rd: add support for crc32 digests based on a complete set of patches by Antoine Lucas - src/{crc32.c,crc32.h,zlib.h,zutil.h,zconf.h}: From zlib 2004 2004-05-26 Dirk Eddelbuettel edd@debian.org * Release 0.1.2 - R/zzz.R: remove test for R < 1.8.0 and load of serialize package (as serialize has been removed from CRAN with serialize() in R) 2003 2003-11-29 Dirk Eddelbuettel edd@debian.org * Release 0.1.1 - DESCRIPTION: added to RCS, $Date$ is now filled - DESCRIPTION: small rewording in Description field - corrected minor packaging error by removing spurious tarball 2003-11-28 Dirk Eddelbuettel edd@debian.org * Release 0.1.0 - DESCRIPTION: added extended Description - inst/ChangeLog: added - man/digest.Rd: added complete test vectors for md5 and sha-1 in example code, values taken from the examples of the C code 2003-10-23 Dirk Eddelbuettel edd@debian.org * Release 0.0.1 - initial version","title":"Changelog"},{"location":"changelog/#2024","text":"2024-12-31 Bill Denney wdenney@humanpredictions.com * DESCRiPTION (Description): Correct typos * README.md: Idem * man/digest.Rd: Idem * sha1.Rd: Idem * vignette/sha1.md: Idem 2024-12-31 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Simplify to r-ci with included bootstrap 2024-09-19 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.h: introduced, to enable additional registrations in init.c * src/digest.c: add digest.h, prune other imports, eliminate version check * src/init.c: introduce digest.h in anticipation of new registrations 2024-08-28 Carl A. B. Pearson carl.ab.pearson@gmail.com * R/digest.R (digest): parse errormode only if in error conditions * R/vdigest.R (getVDigest): parse errormode only if in error conditions 2024-08-24 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Remove unused variables 2024-08-24 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.c (digest): Address signedness warnings 2024-08-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Add two more ORCID IDs 2024-08-22 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.c: switch output handling from macro to function; consolidate stringification loop approaches 2024-08-21 Dirk Eddelbuettel edd@debian.org * man/digest.Rd: Update \\code{raw} entry * DESCRIPTION (Authors@R): Add two more ORCID IDs 2024-08-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * DESCRIPTION (Authors@R): Add five ORCID IDs 2024-08-19 Carl A. B. Pearson carl.ab.pearson@gmail.com * src/digest.c: enable all hashing algorithms to return raw output. * inst/tinytest/test_raw.R: test raw vs not consistency for all algos. 2024-08-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.37 2024-08-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-08-15 Kevin Ushey kevinushey@gmail.com * src/raes.c: Calloc -> R_Calloc; Free -> R_Free 2024-07-15 Dirk Eddelbuettel edd@debian.org * README.md: Switch some URLs from http to https 2024-06-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.36 * src/digest.c (is_little_endian): Define alternate helper too * man/digest.Rd: Compare to spookyhash ref only on little endian 2024-06-22 Dirk Eddelbuettel edd@debian.org * src/digest.c (is_big_endian): Use endian-ness definition from Rconfig.h and define one-line helper * inst/tinytest/test_digest.R: Skip spookyhash test on big endian 2024-06-21 Sergey Fedorov vital.had@gmail.com * src/blake3.c: Upstream patch for big endian systems * src/blake3_impl.h: Idem * src/blake3_portable.c: Idem 2024-06-15 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to r-ci-setup action 2024-05-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * README.md: Use tinyverse.netlify.app for dependency badge * src/spooky_serialize.cpp: Several small updates to please clang++ * src/SpookyV2.cpp: Idem * .github/workflows/ci.yaml: Show logs in case of failure 2024-03-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * src/spooky_serialize.cpp: Use R_NO_REMAP, add three Rf_ prefixes 2024-03-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.35 * src/xxhash.h: Update to current release 0.8.2 * src/xxhash.c: Idem * src/digest.c: Support added xxhash algorithms xxh3_64 and xxh3_128 * R/digest.R: Idem * R/vdigest.R: Support xxh3_64 and xxh3_128 in vectorized mode * inst/tinytest/test_digest.R: Add tests for xxh3_64 and xxh3_128 * man/digest.Rd: Documentation * man/vdigest.Rd: Idem * DESCRIPTION (Description): Mention xxh3_64 and xxh3_128 * README.md: Idem * src/digest.c (digest): Consistently print uint64_t via PRIx 2024-01-11 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.34 2024-01-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4 2024-01-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * src/digest.c (open_with_widechar_on_windows): Correct format specification in error() call on Windows","title":"2024"},{"location":"changelog/#2023","text":"2023-08-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * DESCRIPTION: Add Michael contributors * README.md: Idem 2023-08-03 Michael Chirico chiricom@google.com * tests/tinytest.R: Define `expect_length()` if needed (it is only available from tinytest 1.4.1 released February 2023) * src/digest.c: `#include <stdint.h>` for `uint32_t` 2023-06-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.33 * src/crc32c/crc32c_config.h: Minor comment edit 2023-06-27 Sergey Fedorov vital.had@gmail.com * src/crc32c/crc32c_config.h: Use endian macros to set endianness 2023-06-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * src/crc32c/crc32c_config.h: Undefine HAVE_BUILTIN_PREFETCH and HAVE_MM_PREFETCH for maximum portability and builds on M1/M2/Arm64 2023-06-26 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.32 * README.md: Add r-universe badge * README.md: Add crc32c, and link to docs site, to Overview 2023-06-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * DESCRIPTION (Author): Add Dean Attali 2023-06-25 Dean Attali daattali@gmail.com * R/AES.R: Add `padding` parameter to `AES()` to allow CBC mode to use PKCS#7 padding * inst/tinytest/test_aes.R: Add tests for new `padding` parameter * man/AES.Rd: Document the `raw` argument of `AES()$decrypt()` and the new `padding` parameter 2023-04-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll micro version and date * R/vdigest.R: Enable vectorised operation for blake3 and crc32v * man/vdigest.Rd: Update documentation 2023-04-29 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Support crc33c * man/digest.Rd: Document crc32c option, add two examples * src/crc32c.h: Adding new CRC32C implementation * src/crc32c.cpp: Idem * src/crc32c_portable.cpp: Idem; also added codecov nocov * src/crc32c/*: Idem * src/Makevars: Added for PKG_CPPFLAGS * src/Makevars.win: Idem * R/init.R: Added some codecov nocov * .codecov.yml (coverage): Added coverage diff settings 2023-02-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/Makevars: No longer require CXX_STD","title":"2023"},{"location":"changelog/#2022","text":"2022-12-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.31 * src/digest.c: Replace sprintf with snprintf * .editorconfig: Added * .Rbuildignore: Updated 2022-11-05 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3 2022-10-17 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.30 * src/crc32.c: Modernize three function signatures to current C standards to appease clang-15 now used by CRAN * src/sha2.c (SHA512_End): Align two function signatures to their prototypes to appease gcc-12 2022-10-02 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/index.md: Several small updates with upgrade to Material for MkDocs 8.5.5","title":"2022"},{"location":"changelog/#2021","text":"2021-11-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.29 * src/digest.c (digest): Accomodate Windows UCRT build * man/AES.Rd: Remove one URL that upsets the URL checker * README.md: Update one URL that upsets the URL checker 2021-11-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * vignettes/sha1.md: Renamed from .Rmd, corrected code block syntax 2021-11-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (VignetteBuilder): Converted to simplermarkdown engine * vignettes/sha1.Rmd: Idem * vignettes/water.css: Added 2021-11-05 Dirk Eddelbuettel edd@debian.org * README.md: Remove Travis badge * .travis.yml: Remove Travis YAML config 2021-09-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.28 2021-09-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * vignettes/sha1.Rmd (date): Remove knitr date calculation in YAML header which GitHub does not like and mistakes for Jekyll code * docs/mkdmt-src/src/vignette.md (date): Idem * README.md: Add total download badge, label other as monthly 2021-09-22 Andr\u00e1s Svraka svraka.andras@gmail.com * R/vdigest.R (non_streaming_digest): Ensure UTF-8 encoded file paths on Windows * inst/tinytest/test_encoding.R: Expand test coverage for path name encodings on Windows 2021-03-28 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/: Moved mkdocs-material input 2021-03-26 Dirk Eddelbuettel edd@debian.org * README.md: Add 'last commit' badge 2021-03-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (URL): Add link to repo 2021-03-22 Dirk Eddelbuettel edd@debian.org * docs-src/mkdocs.yml (theme): Add (draft, incomplete) vignette * docs-src/src/vignette.md (title): Idem 2021-03-22 Floris Vanderhaeghe floris.vanderhaeghe@inbo.be * man/digest.Rd: Reworded to also highlight file mode 2021-01-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/SpookyV2.cpp: Disallow unaligned reads which have been seen to trigger SAN issues as reported by Winston in #167","title":"2021"},{"location":"changelog/#2020","text":"2020-12-23 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Add CI runner using r-ci * README.md: Add new CI badge 2020-10-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.27 2020-10-19 Dirk Eddelbuettel edd@debian.org * src/blake3_dispatch.c: Comment-out include of intrinsics to also comment-out erroring on insufficient architectures such as Solaris 2020-10-17 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.26 * docs/: Added package website * docs-src/: Added package website inputs * .travis.yml (dist): Change to focal 2020-10-15 Dirk Eddelbuettel edd@debian.org * README.md: Update URLs * man/digest.Rd: Ditto * man/hmac.Rd: Ditto 2020-10-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/tinytest/test_blake3.R: Skip file-based blake3 tests on Windows * vignettes/sha1.Rmd: Switch to minidown and 'framework: water' * DESCRIPTION (Suggests): Add minidown 2020-10-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-10-06 Winston Chang winston@stdout.org * R/digest.R: Speedup via explicit alternative values for match.arg() and a direct call to serialize() * R/vdigest.R: Idem * R/init.R: Idem (for serialize()) * inst/tinytest/test_digest.R: New test ensuring all variants hit 2020-09-21 Dirk Eddelbuettel edd@debian.org * .travis.yml: Updated to 'bionic', R 4.0, and BSPM 2020-08-03 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Depends): Roll Depends: on to R (>= 3.3.0) due to use of startsWith(), with thanks to Florian Pein 2020-05-20 Dirk Eddelbuettel edd@debian.org * .travis.yml: Switch to bionic and R 4.0.0 2020-05-19 Dirk Schumacher mail@dirk-schumacher.net * src/digest.c: Support file operation * inst/tinytest/test_blake3.R: Update test 2020-05-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Roll minor version and date 2020-05-19 Dirk Schumacher mail@dirk-schumacher.net * src/blake3.c: Add blake3 implementation * src/blake3.h: Idem * src/blake3_dispatch.c: Idem * src/blake3_impl.h: Idem * src/blake3_portable.c: Idem * src/digest.c: Support blake3 call * R/digest.R: Idem * inst/tinytest/test_blake3.R: Add tests * man/digest.Rd: Add documentation 2020-03-05 Harris McGehee mcgehee.harris@gmail.com * man/sha1.Rd: Correct typo 2020-02-26 Dirk Eddelbuettel edd@debian.org * README.md: Add Debian badge 2020-02-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.25 2020-02-15 Kendon Bell bellk@landcareresearch.co.nz * R/digest.R: Complete call to spookyhash 2020-02-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.24","title":"2020"},{"location":"changelog/#2019","text":"2019-12-12 Thierry Onkelinx thierry.onkelinx@inbo.be * DESCRIPTION (Version, Date): Roll minor version * R/sha1.R: ignore the \"srcref\" attribute if set * inst/tinytest/test_new_matrix_behaviour.R: update unit test * inst/tinytest/test_sha1.R: update unit test * man/sha1.Rd: update documentation 2019-12-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/init.c: Do not register a .Call method for PMurHash 2019-12-05 Will Landau will.landau@gmail.com * R/init.R (.onLoad): Cache nosharing state in base::serialize (.hasNoSharing): Return cached value * R/digest.R (digest): Use cached value accessor * R/vdigest.R (non_streaming_digest): Use cached value accessor 2019-12-04 Dirk Eddelbuettel edd@debian.org * R/init.R (.onLoad): Cache isWindows state (.isWindows): Return cached value * R/digest.R (digest): Use cached value accessor 2019-11-23 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_new_matrix_behaviour.R: Split off tests affected by new matrix/array behavior in R-devel (i.e. future R 4.0.0) 2019-11-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.23 * inst/tinytest/test_sha1.R: Uncomment several tests which failed under r-devel on Linux at CRAN 2019-11-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2019-11-11 Bill Denney wdenney@humanpredictions.com * R/sha1.R: Increase efficiency of num2hex() 2019-11-07 Bill Denney wdenney@humanpredictions.com * NAMESPACE: add sha1_digest() and sha1_attr_digest() functions * R/sha1.R: Idem * man/sha1.Rd: Idem * Also, renamed sha1.rd to sha1.Rd 2019-11-03 Bill Denney wdenney@predictions.com * R/sha1.R: Add support for the \"(\" class used in some formulae * NAMESPACE: Idem * man/sha1.Rd: Idem; also corrected typo for old version behavior * inst.tinytest/test_sha1.R: Add tests for the \"(\" class 2019-10-27 Thierry Onkelinx thierry.onkelinx@inbo.be * DESCRIPTION (Version, Date): Roll minor version * R/sha1.R: consider object attributes when calculating the hash * man/sha1.Rd: update documentation * R/init.R: add \"sha1PackageVersion\" option * inst.tinytest/test_sha1.R: add units tests for new functionality * NAMESPACE: import utils::packageVersion 2019-10-26 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/digest.R (digest): Call enc2utf8() only on Windows; add internal one-liner function to test for being on Windows 2019-10-23 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_encoding.R: Skip test unless on Windows 2019-10-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.22 2019-10-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/tinytest/test_misc.R: File split off test_digest.R 2019-10-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Add Ion and Bill to Authors * README.md: Idem 2019-10-13 Jim Hester james.f.hester@gmail.com * src/digest.c: Add support for UTF-8 file paths on Windows * R/digest.R: Idem * inst/tinytest/test_encoding.R: Add tests for UTF-8 file paths. 2019-10-13 Bill Denney wdenney@humanpredictions.com * R/sha1.R: Add sha1.formula() * NAMESPACE: Idem * man/sha1.rd: Idem * inst/tinytest/test_sha1.R: Add tests for sha1.formula() 2019-10-12 Bill Denney wdenney@humanpredictions.com * R/sha1.R: Fix issue with num2hex() and input of Inf * inst/tinytest/test_sha1.R: Add Inf to the tests 2019-10-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * man/digest.Rd: Change three URL references to https * man/hmac.Rd: Ditto * R/utils.R: Move back functions used by digest() + makeVDigest() * R/AES.R: Added copyright header * R/digest.R: Idem * R/hmac.R: Idem * R/sha1.R: Idem * R/vdigest.R: Idem 2019-10-02 Ion Suruceanu ion.suruceanu@gapsquare.com * R/AES.R: Add support for CFB cipher mode * man/AES.Rd: Add documentation * inst/tinytest/test_aes.R: Add tests 2019-09-20 Matthew de Queljoe matthew.dequeljoe@gmail.com * R/digest.R: refactor digest function * R/vdigest.R: remove helper functions from file * R/utils.R: new file to hold helper functions 2019-09-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.21 2019-09-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (Author): Add Matthew * README.md (Author): Ditto * demo/vectorised.R: Add demo (based on Matthew's PR) * R/vdigest.R: Added a handful of #nocov tags * man/vdigest.Rd: Break up two long lines 2019-09-17 Matthew de Queljoe matthew.dequeljoe@gmail.com * src/digest.c: Add vectorised digest function * R/vdigest.R: Add vectorised digest function factory * man/vdigest.Rd: Add documentation * NAMESPACE: Export new function getVDigest * inst/tinytest/test_digest.R: Add tests 2019-07-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.20 2019-06-29 Dirk Eddelbuettel edd@debian.org * README.md: Add installation and continues testing sections * .travis.yml (install): Use r-cran-tinytest from PPA 2019-06-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/tinytest/test_num2hex.R: Quieter with sapply * test/tinytest/test_aes.R: renamed from testAES.R * test/tinytest/test_crc32.R: renamed from testCRC32.R * test/tinytest/test_digest.R: renamed from testDigest.R * test/tinytest/test_digest2int.R: from testDigest2Int.R * test/tinytest/test_hmac.R: renamed from testHMAC.R * test/tinytest/test_num2hex.R: renamed from testNum2Hex.R * test/tinytest/test_raw.R: renamed from testRaw.R * test/tinytest/test_sha1.R: renamed from testSHA1.R 2019-06-10 Dirk Eddelbuettel edd@debian.org * inst/tinytest/testCRC32.R: Use expcect_* functions * inst/tinytest/testDigest2Int.R: Idem * inst/tinytest/testNum2Hex.R: Idem * inst/tinytest/testRaw.R: Idem 2019-05-26 Dirk Eddelbuettel edd@debian.org * tests/tinytest.R: New test driver using tinytest * DESCRIPTION (Suggests): Added tinytest * .travis.yml (install): Install tinytest * inst/tinytest/testRaw.R: Converted from tests/raw.R * inst/tinytest/testCRC32.R: Converted from tests/crc32.R * inst/tinytest/testDigest2Int.R: From tests/digest2int.R * inst/tinytest/testNum2Hex.R: From tests/num2hexTest.R * inst/tinytest/testSHA1.R: Converted from tests/sha1Test.R * inst/tinytest/testHMAC.R: Converted from tests/hmacTest.R * inst/tinytest/testAES.R: Converted from tests/aesTest.R * inst/tinytest/testDigest.R: From tests/digestTest.R * R/AES.R: Additional #nocov tags * R/digest.R: Idem * R/hmac.R: Idem * R/sha1.R: Idem 2019-05-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.19 * src/SpookyV2.cpp: Add some #nocov tags 2019-05-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * tests/digestTest.Rout.save: Updated reference output 2019-05-12 Kendon Bell bellk@landcareresearch.co.nz * R/digest.R: Account for 'skip' bytes for streaming algos * tests/digestTest.R: Adjust test for streaming_algos 2019-05-09 Dirk Eddelbuettel edd@debian.org * src/Makevars: Added to ensure C++11 compilation standard * cleanup: Do not delete src/Makevars now that we have one * tests/digestTest.Rout.save: Updated reference output 2019-05-06 Dirk Eddelbuettel edd@debian.org * README.md: Mention spookyhash and Kendon * DESCRIPTION (Description): Mention spookyhash 2019-05-04 Kendon Bell bellk@landcareresearch.co.nz * tests/digestTest.R: Added more tests * src/spooky_serialize.cpp: Added copyright header 2019-05-04 Dirk Eddelbuettel edd@debian.org * R/digest.R: Add some #nocov tags * src/SpookyV2.h: Idem * src/SpookyV2.cpp: Idem * src/spooky_serialize.cpp: Idem 2019-05-03 Dirk Eddelbuettel edd@debian.org * tests/digestTest.Rout.save: Updated reference output 2019-04-30 Kendon Bell bellk@landcareresearch.co.nz * digest.R: Support spookyhash * src/SpookyV2.h: Idem * src/SpookyV2.cpp: Idem * src/spooky_serialize.cpp: Idem * man/digest.Rd: Document spookyhash 2019-04-23 Kendon Bell bellk@landcareresearch.co.nz * src/digest.c: Switch length counter to R_xlen_t","title":"2019"},{"location":"changelog/#2018","text":"2018-12-23 Dirk Eddelbuettel edd@debian.org * NAMESPACE: Add .registration=TRUE to useDynLib() 2018-11-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2018-11-08 Dmitriy Selivanov selivanov.dmitriy@gmail.com * src/digest2int.c: Removed (bad) redefinition of uint32_t * tests/digest2intTest.R: Additional test 2018-10-29 Dmitriy Selivanov selivanov.dmitriy@gmail.com * DESCRIPTION (Version, Date): minor version * digest2int.R (digest2int): added digest2int * src/digest2int.c (digest2int): added Bob Jenkins `one_at_a_time` function for hashing arbitrary character vectors to integer vectors 2018-10-18 Dirk Eddelbuettel edd@debian.org * README.md: Added dependencies badge 2018-10-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.18 2018-09-16 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Six more #nocov tags * README.md: Small edits 2018-09-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/sha2.c: Explicitly #undef SHA256_ and SHA384_ functions not used from this file 2018-09-13 Radford Neal radfordneal@gmail.com * src/pmurhash.c (DOBYTES): Explicit cast to uint32_t avoids UBSAN 2018-09-13 Jim Hester james.f.hester@gmail.com * src/xxhash.c: Updated to use xxHash v0.6.5 * src/xxhash.h: Ditto * src/digest.c: Ditto 2018-09-11 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.17 2018-09-02 Dirk Eddelbuettel edd@debian.org * .travis.yml: Simplified as covr can be installed from c2d4u 2018-08-30 Radford Neal radfordneal@gmail.com * src/sha2.c: Memory alignment changes motivated by 32bit sparc * src/sha2.h: Ditto 2018-08-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.16 2018-08-20 Dirk Eddelbuettel edd@debian.org * tests/digestTest.Rout: Skip one test which creates different results across versions and operating systems * tests/digestTest.Rout.save: Ditto 2018-08-19 Dirk Eddelbuettel edd@debian.org * tests/hmacTest.R: Added raw test * tests/hmacTest.Rout.save: Updated reference output accordingly * tests/raw.R: Added test for 'raw' vector input to sha1() * R/sha1.R: Removed no longer needed #nocov tags 2018-07-21 Henrik Bengtsson hb@aroma-project.org * DESCRIPTION: digest (>= 0.6.14) requires R (>= 3.0.3) 2018-06-30 Dirk Eddelbuettel edd@debian.org * tests/crc32.R: Added test for crc32 and old versus new formats * tests/raw.R: Added small test file for raw tests 2018-06-29 Dirk Eddelbuettel edd@debian.org * R/init.R: Provide option 'digestOldCRC32Format' which if TRUE returns without zero padding which can be shorter than eight bytes * R/digest.R: If crc32 selected and option set, return in old format * man/digest.Rd: Document new option 2018-06-28 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Change print format for crc32 to always return eight characters and no longer drop leading zeros (thanks to Henrik Bengtsson for the heads-up) 2018-06-21 Dirk Eddelbuettel edd@debian.org * tests/sha1Test.R: Do not run test using serialize() as its output always reflects the R version used (thanks, Radford Neal) 2018-01-29 Dirk Eddelbuettel edd@debian.org * src/sha2.c: Comment-out three unused 'const static' variables 2018-01-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.15 * R/sha1.R (sha1.POSIXlt): Unclass POSIXlt objects as suggested by Kurt Hornik to accomodate R-devel changes * tests/sha1Test.R: Condition one sha1 test seemingly affected by R-devel serialization changes to run only with R < 3.5.0 2018-01-21 Thierry Onkelinx thierry.onkelinx@inbo.be * sha1() gains an `algo` argument * sha1() handles raw class 2018-01-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.14 * man/AES.Rd: Use https for nist.gov reference * man/digest.Rd: Idem * man/hmac.Rd: Idem * man/digest.Rd: Use Wikiepedia page as reference for SHA1 as the reference page at NIST has (long) vanished. * man/hmac.Rd: Idem 2018-01-12 Thierry Onkelinx thierry.onkelinx@inbo.be * sha1() handles empty matrices","title":"2018"},{"location":"changelog/#2017","text":"2017-12-20 Dirk Eddelbuettel edd@debian.org * src/raes.c (AESencryptECB,AESdecryptECD): Replace two uses of NAMED with MAYBE_REFERENCED 2017-12-13 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.6.13 2017-12-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * R/digest.R: Support serializeVersion format * man/digest.Rd: Document new option * R/init.R: Set a default version, and internal getter function 2017-10-12 Chris Muir chrismuirRVA@gmail.com * vignette/sha1.Rmd: Correct simple typo 2017-11-16 Moritz Beller Inventitech@users.noreply.github.com * man/digest.Rd: Replace old Google Code URLs with GitHub ones 2017-02-20 Dirk Eddelbuettel edd@debian.org * man/digest.Rd: Expand example section with a Vectorize() use 2017-01-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * man/digest.Rd: Note that support for 'raw' is not available for all hashing algorithms * .travis.yml (before_install): Use https for curl fetch 2017-01-26 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.12 2017-01-23 Thierry Onkelinx thierry.onkelinx@inbo.be * NAMESPACE: export sha1.function() and sha1.call() * R/sha1.R: - sha1() gains methods for the class \"function\" and \"call\" - sha1() gains a ... argument, currently only relevant for \"function\" - sha1() takes arguments into account for hash for complex, Date and array. Note that this will lead to different hasheS for these classes and for objects containing these classes * man/sha1.rd: update helppage for sha1() * tests/sha1Test.R: update unit tests for sha1() 2017-01-01 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.6.11 * R/sha1.R (sha1.anova): Added more #nocov marks * src/sha2.c (SHA256_Transform): Idem * tests/AESTest.R (hextextToRaw): Print AES object * tests/AESTest.Rout.save: Updated","title":"2017"},{"location":"changelog/#2016","text":"2016-12-08 Dirk Eddelbuettel edd@debian.org * NAMESPACE: Register (and exported) makeRaw S3 methods * man/makeRaw.Rd: New manual page * tests/hmacTest.R: Direct call to makeRaw() * tests/hmacTest.Rout.save: Ditto * src/digest.c: Additional #nocov tags * src/xxhash.c: Ditto 2016-12-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Rolled minor version * README.md: Use shields.io badge for codecov * R/digest.R: Additional #nocov tags * src/sha2.c: Ditto * src/raes.c: Ditto * tests/hmacTest.R: Additional tests * tests/hmacTest.Rout.save: Ditto 2016-11-30 Dirk Eddelbuettel edd@debian.org * .travis.yml (before_install): Activate PPA as we (currently) need an updated version of (r-cran)-covr to run coverage * tests/load-unload.R: Comment-out for now as it upsets coverage * tests/digestTest.R: Test two more algorithms * tests/digestTest.Rout.save: Updated reference output * R/digest.R: Added #nocov tags * R/zzz.R (.onUnload): Ditto * src/crc32.c: Ditto * src/pmurhash.c: Ditto * src/raes.c: Ditto * src/sha2.c: Ditto * src/xxhash.c: Ditto 2016-11-26 Dirk Eddelbuettel edd@debian.org * .travis.yml (after_success): Integrated Jim Hester's suggestion of activating code coverage sent many moons ago (in PR #12) * .codecov.yml (comment): Added * .Rbuildignore: Exclude .codecov.yml * README.md: Added code coverage badge 2016-10-16 Dirk Eddelbuettel edd@debian.org * R/digest.R (digest): Support 'nosharing' option of base::serialize as suggested by Radford Neal whose pqR uses this 2016-08-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (License): Now GPL (>= 2), cf issue 36 on GH * README.md: Updated badge accordingly 2016-08-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Release 0.6.10 * DESCRIPTION (Description): Shortened to one paragraph * DESCRIPTION (BugReports): URL to GH issues added * .travis.yml: Rewritten for run.sh from forked r-travis 2016-07-12 Henrik Bengtsson hb@aroma-project.org * src/digest.c: Correct bug with skip and file parameter interaction * tests/digestTest.R: Test code * tests/digestTest.Rout.save: Test reference output * R/zzz.R: Allow for unloading of shared library * tests/load-unload.R: Test code * DESCRIPTION: Rolled minor Version and Date 2016-05-25 Thierry Onkelinx thierry.onkelinx@inbo.be * R/sha1.R: Support for pairlist and name * tests/sha1Test.R: Support for pairlist and name * man/sha1.Rd: Support for pairlist, name, complex, array and Date * NAMESPACE: Support for pairlist, name and array * DESCRIPTION: bump version number and date 2016-05-01 Viliam Simko viliam.simko@gmail.com * R/sha1.R: Support for complex, Date and array * tests/sha1Test.R: Ditto * NAMESPACE: Ditto 2016-04-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Author): Add Qiang Kou to Authors * README.md: Ditto 2016-01-25 Dirk Eddelbuettel edd@debian.org * src/digest.c (digest): Use XLENGTH if R >= 3.0.0 (issue #29) 2016-01-11 Thierry Onkelinx thierry.onkelinx@inbo.be * R/sha1.R: handle empty list and empty dataframe (#issue 27); take the object class, digits and zapsmall into account (#PR 28) * vignettes/sha1.Rmd: Small edits to reflect changes is sha1() 2016-01-09 Michel Lang michellang@gmail.com * R/sha1.R: Add a length check to sha1(), use vapply() 2016-01-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.9 * DESCRIPTION (Date): Bumped Date: to current date 2016-01-06 Dirk Eddelbuettel edd@debian.org * vignettes/sha1.Rmd: Small edits 2016-01-06 Thierry Onkelinx thierry.onkelinx@inbo.be * R/sha1.R: Add functions to calculate stable SHA1 with floating points * man/sha1.Rd: Add helpfile for sha1() * tests/num2hexTest.R: unit tests for num2hex() (non exported function) * tests/sha1Test.R: unit tests for sha1() * NAMESPACE: Export sha1 and its methods * DESCRIPTION: Add Thierry Onkelinx as contributor, bump Version and Date * README.md: Add Thierry Onkelinx as contributor * vignette/sha1.Rmd: Added * .travis.yml: Added 'sudo: required' per recent Travis changes","title":"2016"},{"location":"changelog/#2015","text":"2015-10-14 Dirk Eddelbuettel edd@debian.org * man/digest.Rd: Remove references to inaccessible web pages * man/hmac.Rd: Ditto 2015-10-13 Dirk Eddelbuettel edd@debian.org * src/digest.c: Use uint32_t instead of int for nchar 2015-10-12 Qiang Kou qkou@umail.iu.edu * src/digest.c: Use XLENGTH instead of LENGTH (PR #17, issue #16) 2015-08-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Title): Updated now stressing 'compact' over 'crypto'","title":"2015"},{"location":"changelog/#2014","text":"2014-12-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.8 * DESCRIPTION (Date): Bumped Date: to current date 2014-12-29 Dirk Eddelbuettel edd@debian.org * inst/include/pmurhashAPI.h: Added HOWTO comment to top of file 2014-12-26 Dirk Eddelbuettel edd@debian.org * src/pmurhash.c: Protect against _BIG_ENDIAN defined but empty * inst/include/pmurhash.h: Consistent four space indentation 2014-12-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Bump Date: and Version: * src/init.c: Minor edit and removal of unused headers 2014-12-25 Wush Wu wush978@gmail.com * inst/include/pmurhash.h: Export function * src/init.c: Register function for use by other packages 2014-12-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.7 * DESCRIPTION (Date): Bumped Date: to current date 2014-12-19 Dirk Eddelbuettel edd@debian.org * cleanup: Also remove src/symbols.rds * src/sha2.c: Apply (slightly edited) patch from https://www.nlnetlabs.nl/bugs-script/attachment.cgi?id=220&action=diff to overcome the strict-aliasing warning * src/digest.c: Use inttypes.h macro PRIx64 only on Windows 2014-12-16 Dirk Eddelbuettel edd@debian.org * src/xxhash.c: Remove two semicolons to make gcc -pedantic happy * tests/digestTest.Rout.save: Updated reflecting murmurHash test * src/pmurhash.c: Renamed from PMurHash.c for naming consistency * src/pmurhash.h: Renamed from PMurHash.h for naming consistency 2014-12-16 Jim Hester james.f.hester@gmail.com * src/digest.c: murmurHash implementation * tests/digestTest.R: murmurHash implementation * R/digest.R: murmurHash implementation * src/PMurHash.c: murmurHash implementation * src/PMurHash.h: murmurHash implementation 2014-12-10 Dirk Eddelbuettel edd@debian.org * src/xxhash.c: Applied pull request #6 by Jim Hester with updated upstream code and already corrected UBSAN issue identified by CRAN 2014-12-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.6 * DESCRIPTION (Date): Bumped Date: to current date * src/digest.c: Applied pull request #5 by Jim Hester providing portable integer printing inttypes.h header 2014-12-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.5 * DESCRIPTION (Date): Bumped Date: to current date * NAMESPACE: Expanded useDynLib() declaring C level symbols, in particular using digest_impl to for the C-level digest * R/AES.R: Use R symbols from NAMESPACE declaration in .Call() * R/digest.R: Use R symbol digest_impl to load C level digest 2014-12-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: Edited Title and Description * R/digest.R: Added GPL copyright header, reindented to four spaces * src/digest.c: Reindented to four spaces * R/AES.R: Reindented to four spaces * R/hmac.R: Reindented to four spaces 2014-12-06 Dirk Eddelbuettel edd@debian.org * src/digest.c: Updated GPL copyright header * src/xxhash.c: Removed two spurious ';' * man/digest.Rd: Document 'seed' argument in \\usage * tests/digest.Rout.save: Updated for expanded tests * DESCRIPTION: Add Jim Hester to list of Authors 2014-12-05 Dirk Eddelbuettel edd@debian.org * R/digest.R: Applied pull request #3 by Jim Hester with support for xxHash (https://code.google.com/p/xxhash/) * src/digest.c: Ditto * src/xxhash.c: xxHash implementation supplied as part of #3 * src/xxhash.h: xxHash implementation supplied as part of #3 * R/digest.R: Applied pull request #4 by Jim Hester with expanded support for xxHash providing xxhash32 and xxhash64 * src/digest.c: Ditto * man/digest.Rd: Added documentation for xxHash, corrected typos * src/digest.R: New support for a seed parameter used by xxHash * tests/digestTest.R: Added tests for xxHash 2014-08-15 Dirk Eddelbuettel edd@debian.org * R/hmac.R: Applied (slightly edited) patch for crc32 computation of hmac kindly supplied by Suchen Jin","title":"2014"},{"location":"changelog/#2013","text":"2013-12-02 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.4 * src/sha2.h (BYTE_ORDER): Define BYTE_ORDER unless already defined, rely on Rconfig.h which itself goes back to an R compile-time test 2013-02-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.3 2013-02-06 Hannes M\u00fchleisen hannes@cwi.nl * R/hmac.R: Fixed hmac for sha512 hashes * tests/hmacTest.R: Added test cases for hmac with sha512 * tests/hmacTest.Rout.save: Updated accordingly 2013-01-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.2 * man/AES.Rd: Switch from paste0() to paste() to permit use on R-oldrelease as per email by Uwe Ligges * tests/AESTest.R: Idem * tests/AESTest.Rout.save: Updated accordingly 2013-01-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Version 0.6.1 * inst/GPL-2: Added as a fixed reference input for regression tests via the scripts in tests/ as the versions installed by R differ across OS and installations * tests/digestTest.R: No longer rely on file.path(R.home(),\"COPYING\") but rather use our own copy of GPL-2; ensure final test does not print * tests/digestTest.Rout.save: Updated accordingly 2013-01-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors): Added Duncan Murdoch 2013-01-19 Duncan Murdoch murdoch.duncan@gmail.com * src/aes.c: Devine's AES implementation added * src/aes.h: header for AES implementation * src/raes.c: interface to it * R/AES.R: Add AES object to do AES encryption * tests/AESTest.R: tests from the standards documents * man/AES.Rd: document AES object * NAMESPACE: export AES constructor and print method","title":"2013"},{"location":"changelog/#2012","text":"2012-11-25 Dirk Eddelbuettel edd@debian.org * Release 0.6.0 * src/sha2.h: In order to build on Windows: - Include the newer header file stdint.h - Enforce standard integer types by defining SHA2_USE_INTTYPES_H - Define BYTE_ORDER and default to LITTLE_ENDIAN * src/digest.c: Use uint8_t from stdint.h for sha256 2012-11-24 Dirk Eddelbuettel edd@debian.org * src/digest.c: Allow for extra null character in output[] vector * tests/digestTest.Rout.save: Update/Revert a change by Hannes; Naturally we do not get a single set that works for R-release and R-devel. Sigh. 2012-11-24 Hannes M\u00fchleisen hannes@cwi.nl * src/digest.c: sha-512 integration * src/sha2.h: Header file for Aaron Gifford's SHA2 implementation * src/sha2.c: Aaron Gifford's sha2 implementation * R/digest.R: enabled new sha-512 algorithm parameter * R/hmac.R: enabled new sha-512 algorithm parameter * man/digest.Rd: documented new sha-512 algorithm parameter * man/hmac.Rd: documented new sha-512 algorithm parameter * tests/digestTest.R: Added sha-512 test cases 2012-03-14 Dirk Eddelbuettel edd@debian.org * Release 0.5.2 * Applied patch by Murray Stokely: - R/digest.R: Additional test for file accessibility; segfault can happen if inaccesible file passed down - tests/digestTest.R: New test which leads to segfault in unpatched package, and passes with these changes - src/digest.c: Simpler use of error() via format string * DESCRIPTION: Fixed one typo in extended description * tests/digest.Rout.save: Updated to current output; version 0.5.1 created the same difference so it is presumably once again something that changed in R's serialization. Oh, and R-devel changes it again.","title":"2012"},{"location":"changelog/#2011","text":"2011-09-20 Dirk Eddelbuettel edd@debian.org * Release 0.5.1 * tests/digestTest.Rout.save: Updated reference output too 2011-09-18 Bryan Lewis blewis@illposed.net * tests/digestTest.R: Added basic raw output md5 and sha1 tests 2011-09-14 Dirk Eddelbuettel edd@debian.org * src/digest.c: Applied patch contributed by Bryan Lewis which supports output of unmodified raw binary output if a new function parameter 'raw' (which defaults to FALSE) is set to TRUE * R/digest.R: Support new parameter 'raw' * man/digest.Rd: Document new parameter 'raw' 2011-05-29 Dirk Eddelbuettel edd@debian.org * Release 0.5.0 2011-05-26 Dirk Eddelbuettel edd@debian.org * R/hmac.R: Switched to camelCase identifiers after discussion with Henrik and Mario 2011-05-25 Dirk Eddelbuettel edd@debian.org * R/hmac.R: New hmac() function contributed by Mario Frasca * man/hmac.Rd: Documentation contributed by Mario Frasca * tests/hmacTest.R: Added a new regression test file for hmac() * tests/hmacTest.Rout.save: Added new reference output * tests/digestTest.Rout.save: Updated reference digest output for simple R structure to match what R 2.13.0 yields * inst/ChangeLog: moved to ChangeLog (in top-level directory) * INDEX: removed, as no longer needed","title":"2011"},{"location":"changelog/#2009","text":"2009-12-03 Henrik Bengtsson henrikb@braju.com * Release 0.4.2 * R/digest.R: Bug fix - digest(object, file=TRUE) where object is a directory would cause R to crash. Now it gives an error. 2009-10-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION: set SVN properties Date and Id, fix indentation 2009-09-24 Dirk Eddelbuettel edd@debian.org * Release 0.4.1 * src/Makefile.win: Removed as package builds on Windows without it but not with it being present * src/digest.c: Updated Copyright years, set SVN properties Date and Id * R/digest.R: Idem * man/digest.Rd: Idem 2009-09-23 Dirk Eddelbuettel edd@debian.org * Release 0.4.0 * src/sha256.c: Added sha-256 implementation by Christophe Devine as found (via Google Code Search) in a number of Open Source projects such as mushclient, aescrypt2, scrypt, and ipanon * src/sha256.h: Idem * src/digest.c: Modified to support SHA-256 * R/digest.R: Idem * man/digest.Rd: Idem, also added more references * src/Makefile.win: Updated for SHA-256, and generally spruced up","title":"2009"},{"location":"changelog/#2007","text":"2007-09-28 Dirk Eddelbuettel edd@debian.org * Release 0.3.1 * DESCRIPTION: Switched to standardised form 'GPL-2' for License: * src/digest.c: Added one explicit (char *) cast 2007-04-27 Dirk Eddelbuettel edd@debian.org * Release 0.3.0 * R/digest.R: Adopted two more changes suggested by Henrik 2007-03-12 Dirk Eddelbuettel edd@debian.org * R/digest.R: Adopted a few changes suggested by Henrik 2007-03-09 Dirk Eddelbuettel edd@debian.org - R/digest.R, man/digest.Rd, Applied two more patches by Simon Urbanek that clean object mangling (for better comparison across R versions, adds an ascii flag, adds skip=\"auto\" support to by pass the version header info, and clean the file option interface. This effectively replaces Henrik's patch relative to the 0.2.3 release. Thanks for the patches, Simon! - tests/digestTest.Rout.save: New reference output; one line changed 2007-03-08 Dirk Eddelbuettel edd@debian.org - R/digest.R, man/digest.Rd, src/digest.C: Applied two patches by Simon Urbanek to help improve consistence of digest output across different R versions by allowing digest to 'skip' a certain number of bytes; and by adding support for 'raw' serialization input 2007-01-08 Dirk Eddelbuettel edd@debian.org - R/digest.R: Added improvement suggested by Henrik","title":"2007"},{"location":"changelog/#2006","text":"2006-12-30 Dirk Eddelbuettel edd@debian.org * Release 0.2.3 - R/digest.R: Added file.expand() around filename 2006-07-28 Dirk Eddelbuettel edd@debian.org * Release 0.2.2 - R/digest.R: Added patch for R 2.4.0 by Henrik Bengtsson - tests/: Added simple unit tests","title":"2006"},{"location":"changelog/#2005","text":"2005-11-02 Dirk Eddelbuettel deddelbu@lx-chprd97.wfg.com * Release 0.2.1 - R/digest.R, src/digest.c, man/digest.Rd: add support for file mode based on a complete set of patches by Jarek Tuszynski 2005-04-06 Dirk Eddelbuettel edd@debian.org * Release 0.2.0 - R/digest.R, src/digest.c, man/digest.Rd: add support for crc32 digests based on a complete set of patches by Antoine Lucas - src/{crc32.c,crc32.h,zlib.h,zutil.h,zconf.h}: From zlib","title":"2005"},{"location":"changelog/#2004","text":"2004-05-26 Dirk Eddelbuettel edd@debian.org * Release 0.1.2 - R/zzz.R: remove test for R < 1.8.0 and load of serialize package (as serialize has been removed from CRAN with serialize() in R)","title":"2004"},{"location":"changelog/#2003","text":"2003-11-29 Dirk Eddelbuettel edd@debian.org * Release 0.1.1 - DESCRIPTION: added to RCS, $Date$ is now filled - DESCRIPTION: small rewording in Description field - corrected minor packaging error by removing spurious tarball 2003-11-28 Dirk Eddelbuettel edd@debian.org * Release 0.1.0 - DESCRIPTION: added extended Description - inst/ChangeLog: added - man/digest.Rd: added complete test vectors for md5 and sha-1 in example code, values taken from the examples of the C code 2003-10-23 Dirk Eddelbuettel edd@debian.org * Release 0.0.1 - initial version","title":"2003"},{"location":"vignette/","text":"Calculating SHA1 hashes with digest() and sha1() Thierry Onkelinx and Dirk Eddelbuettel Written Jan 2016, updated Jan 2018 and Oct 2020 NB: This vignette is (still) work-in-progress and not yet complete. Short intro on hashes TBD Difference between digest() and sha1() R FAQ 7.31 illustrates potential problems with floating point arithmetic. Mathematically the equality $x = \\sqrt{x}^2$ should hold. But the precision of floating points numbers is finite. Hence some rounding is done, leading to numbers which are no longer identical. An illustration: # FAQ 7.31 a0 <- 2 b <- sqrt(a0) a1 <- b ^ 2 identical(a0, a1) a0 - a1 a <- c(a0, a1) # hexadecimal representation sprintf(\"%a\", a) Although the difference is small, any difference will result in different hash when using the digest() function. However, the sha1() function tackles this problem by using the hexadecimal representation of the numbers and truncates that representation to a certain number of digits prior to calculating the hash function. library(digest) # different hashes with digest sapply(a, digest, algo = \"sha1\") # same hash with sha1 with default digits (14) sapply(a, sha1) # larger digits can lead to different hashes sapply(a, sha1, digits = 15) # decreasing the number of digits gives a stronger truncation # the hash will change when then truncation gives a different result # case where truncating gives same hexadecimal value sapply(a, sha1, digits = 13) sapply(a, sha1, digits = 10) # case where truncating gives different hexadecimal value c(sha1(pi), sha1(pi, digits = 13), sha1(pi, digits = 10)) The result of floating point arithmetic on 32-bit and 64-bit can be slightly different. E.g. print(pi ^ 11, 22) returns 294204.01797389047 on 32-bit and 294204.01797389053 on 64-bit. Note that only the last 2 digits are different. command 32-bit 64-bit print(pi ^ 11, 22) 294204.01797389047 294204.01797389053 sprintf(\"%a\", pi ^ 11) \"0x1.1f4f01267bf5fp+18\" \"0x1.1f4f01267bf6p+18\" digest(pi ^ 11, algo = \"sha1\") \"c5efc7f167df1bb402b27cf9b405d7cebfba339a\" \"b61f6fea5e2a7952692cefe8bba86a00af3de713\" sha1(pi ^ 11, digits = 14) \"5c7740500b8f78ec2354ea6af58ea69634d9b7b1\" \"4f3e296b9922a7ddece2183b1478d0685609a359\" sha1(pi ^ 11, digits = 13) \"372289f87396b0877ccb4790cf40bcb5e658cad7\" \"372289f87396b0877ccb4790cf40bcb5e658cad7\" sha1(pi ^ 11, digits = 10) \"c05965af43f9566bfb5622f335817f674abfc9e4\" \"c05965af43f9566bfb5622f335817f674abfc9e4\" Choosing digest() or sha1() TBD Creating a sha1 method for other classes How to Identify the relevant components for the hash. Determine the class of each relevant component and check if they are handled by sha1() . Write a method for each component class not yet handled by sha1 . Extract the relevant components. Combine the relevant components into a list. Not required in case of a single component. Apply sha1() on the (list of) relevant component(s). Turn this into a function with name sha1. classname . sha1. classname needs exactly the same arguments as sha1() Choose sensible defaults for the arguments zapsmall = 7 is recommended. digits = 14 is recommended in case all numerics are data. digits = 4 is recommended in case some numerics stem from floating point arithmetic. summary.lm Let's illustrate this using the summary of a simple linear regression. Suppose that we want a hash that takes into account the coefficients, their standard error and sigma. # taken from the help file of lm.influence lm_SR <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) lm_sum <- summary(lm_SR) class(lm_sum) # str() gives the structure of the lm object str(lm_sum) # extract the coefficients and their standard error coef_sum <- coef(lm_sum)[, c(\"Estimate\", \"Std. Error\")] # extract sigma sigma <- lm_sum$sigma # check the class of each component class(coef_sum) class(sigma) # sha1() has methods for both matrix and numeric # because the values originate from floating point arithmetic it is better to use a low number of digits sha1(coef_sum, digits = 4) sha1(sigma, digits = 4) # we want a single hash # combining the components in a list is a solution that works sha1(list(coef_sum, sigma), digits = 4) # now turn everything into an S3 method # - a function with name \"sha1.classname\" # - must have the same arguments as sha1() sha1.summary.lm <- function(x, digits = 4, zapsmall = 7){ coef_sum <- coef(x)[, c(\"Estimate\", \"Std. Error\")] sigma <- x$sigma combined <- list(coef_sum, sigma) sha1(combined, digits = digits, zapsmall = zapsmall) } sha1(lm_sum) # try an altered dataset LCS2 <- LifeCycleSavings[rownames(LifeCycleSavings) != \"Zambia\", ] lm_SR2 <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LCS2) sha1(summary(lm_SR2)) lm Let's illustrate this using the summary of a simple linear regression. Suppose that we want a hash that takes into account the coefficients, their standard error and sigma. class(lm_SR) # str() gives the structure of the lm object str(lm_SR) # extract the model and the terms lm_model <- lm_SR$model lm_terms <- lm_SR$terms # check their class class(lm_model) # handled by sha1() class(lm_terms) # not handled by sha1() # define a method for formula sha1.formula <- function(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\"){ sha1(as.character(x), digits = digits, zapsmall = zapsmall, algo = algo) } sha1(lm_terms) sha1(lm_model) # define a method for lm sha1.lm <- function(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\"){ lm_model <- x$model lm_terms <- x$terms combined <- list(lm_model, lm_terms) sha1(combined, digits = digits, zapsmall = zapsmall, ..., algo = algo) } sha1(lm_SR) sha1(lm_SR2) Using hashes to track changes in analysis Use case automated analysis update frequency of the data might be lower than the frequency of automated analysis similar analyses on many datasets (e.g. many species in ecology) analyses that require a lot of computing time not rerunning an analysis because nothing has changed saves enough resources to compensate the overhead of tracking changes Bundle all relevant information on an analysis in a class data method formula other metadata resulting model calculate sha1() file fingerprint ~ sha1() on the stable parts status fingerprint ~ sha1() on the parts that result for the model Prepare analysis objects Store each analysis object in a rda file which uses the file fingerprint as filename File will already exist when no change in analysis Don't overwrite existing files Loop over all rda files Do nothing if the analysis was run Otherwise run the analysis and update the status and status fingerprint","title":"Sha1 Vignette"},{"location":"vignette/#calculating-sha1-hashes-with-digest-and-sha1","text":"Thierry Onkelinx and Dirk Eddelbuettel Written Jan 2016, updated Jan 2018 and Oct 2020 NB: This vignette is (still) work-in-progress and not yet complete.","title":"Calculating SHA1 hashes with digest() and sha1()"},{"location":"vignette/#short-intro-on-hashes","text":"TBD","title":"Short intro on hashes"},{"location":"vignette/#difference-between-digest-and-sha1","text":"R FAQ 7.31 illustrates potential problems with floating point arithmetic. Mathematically the equality $x = \\sqrt{x}^2$ should hold. But the precision of floating points numbers is finite. Hence some rounding is done, leading to numbers which are no longer identical. An illustration: # FAQ 7.31 a0 <- 2 b <- sqrt(a0) a1 <- b ^ 2 identical(a0, a1) a0 - a1 a <- c(a0, a1) # hexadecimal representation sprintf(\"%a\", a) Although the difference is small, any difference will result in different hash when using the digest() function. However, the sha1() function tackles this problem by using the hexadecimal representation of the numbers and truncates that representation to a certain number of digits prior to calculating the hash function. library(digest) # different hashes with digest sapply(a, digest, algo = \"sha1\") # same hash with sha1 with default digits (14) sapply(a, sha1) # larger digits can lead to different hashes sapply(a, sha1, digits = 15) # decreasing the number of digits gives a stronger truncation # the hash will change when then truncation gives a different result # case where truncating gives same hexadecimal value sapply(a, sha1, digits = 13) sapply(a, sha1, digits = 10) # case where truncating gives different hexadecimal value c(sha1(pi), sha1(pi, digits = 13), sha1(pi, digits = 10)) The result of floating point arithmetic on 32-bit and 64-bit can be slightly different. E.g. print(pi ^ 11, 22) returns 294204.01797389047 on 32-bit and 294204.01797389053 on 64-bit. Note that only the last 2 digits are different. command 32-bit 64-bit print(pi ^ 11, 22) 294204.01797389047 294204.01797389053 sprintf(\"%a\", pi ^ 11) \"0x1.1f4f01267bf5fp+18\" \"0x1.1f4f01267bf6p+18\" digest(pi ^ 11, algo = \"sha1\") \"c5efc7f167df1bb402b27cf9b405d7cebfba339a\" \"b61f6fea5e2a7952692cefe8bba86a00af3de713\" sha1(pi ^ 11, digits = 14) \"5c7740500b8f78ec2354ea6af58ea69634d9b7b1\" \"4f3e296b9922a7ddece2183b1478d0685609a359\" sha1(pi ^ 11, digits = 13) \"372289f87396b0877ccb4790cf40bcb5e658cad7\" \"372289f87396b0877ccb4790cf40bcb5e658cad7\" sha1(pi ^ 11, digits = 10) \"c05965af43f9566bfb5622f335817f674abfc9e4\" \"c05965af43f9566bfb5622f335817f674abfc9e4\"","title":"Difference between digest() and sha1()"},{"location":"vignette/#choosing-digest-or-sha1","text":"TBD","title":"Choosing digest() or sha1()"},{"location":"vignette/#creating-a-sha1-method-for-other-classes","text":"","title":"Creating a sha1 method for other classes"},{"location":"vignette/#how-to","text":"Identify the relevant components for the hash. Determine the class of each relevant component and check if they are handled by sha1() . Write a method for each component class not yet handled by sha1 . Extract the relevant components. Combine the relevant components into a list. Not required in case of a single component. Apply sha1() on the (list of) relevant component(s). Turn this into a function with name sha1. classname . sha1. classname needs exactly the same arguments as sha1() Choose sensible defaults for the arguments zapsmall = 7 is recommended. digits = 14 is recommended in case all numerics are data. digits = 4 is recommended in case some numerics stem from floating point arithmetic.","title":"How to"},{"location":"vignette/#summarylm","text":"Let's illustrate this using the summary of a simple linear regression. Suppose that we want a hash that takes into account the coefficients, their standard error and sigma. # taken from the help file of lm.influence lm_SR <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings) lm_sum <- summary(lm_SR) class(lm_sum) # str() gives the structure of the lm object str(lm_sum) # extract the coefficients and their standard error coef_sum <- coef(lm_sum)[, c(\"Estimate\", \"Std. Error\")] # extract sigma sigma <- lm_sum$sigma # check the class of each component class(coef_sum) class(sigma) # sha1() has methods for both matrix and numeric # because the values originate from floating point arithmetic it is better to use a low number of digits sha1(coef_sum, digits = 4) sha1(sigma, digits = 4) # we want a single hash # combining the components in a list is a solution that works sha1(list(coef_sum, sigma), digits = 4) # now turn everything into an S3 method # - a function with name \"sha1.classname\" # - must have the same arguments as sha1() sha1.summary.lm <- function(x, digits = 4, zapsmall = 7){ coef_sum <- coef(x)[, c(\"Estimate\", \"Std. Error\")] sigma <- x$sigma combined <- list(coef_sum, sigma) sha1(combined, digits = digits, zapsmall = zapsmall) } sha1(lm_sum) # try an altered dataset LCS2 <- LifeCycleSavings[rownames(LifeCycleSavings) != \"Zambia\", ] lm_SR2 <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LCS2) sha1(summary(lm_SR2))","title":"summary.lm"},{"location":"vignette/#lm","text":"Let's illustrate this using the summary of a simple linear regression. Suppose that we want a hash that takes into account the coefficients, their standard error and sigma. class(lm_SR) # str() gives the structure of the lm object str(lm_SR) # extract the model and the terms lm_model <- lm_SR$model lm_terms <- lm_SR$terms # check their class class(lm_model) # handled by sha1() class(lm_terms) # not handled by sha1() # define a method for formula sha1.formula <- function(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\"){ sha1(as.character(x), digits = digits, zapsmall = zapsmall, algo = algo) } sha1(lm_terms) sha1(lm_model) # define a method for lm sha1.lm <- function(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\"){ lm_model <- x$model lm_terms <- x$terms combined <- list(lm_model, lm_terms) sha1(combined, digits = digits, zapsmall = zapsmall, ..., algo = algo) } sha1(lm_SR) sha1(lm_SR2)","title":"lm"},{"location":"vignette/#using-hashes-to-track-changes-in-analysis","text":"Use case automated analysis update frequency of the data might be lower than the frequency of automated analysis similar analyses on many datasets (e.g. many species in ecology) analyses that require a lot of computing time not rerunning an analysis because nothing has changed saves enough resources to compensate the overhead of tracking changes Bundle all relevant information on an analysis in a class data method formula other metadata resulting model calculate sha1() file fingerprint ~ sha1() on the stable parts status fingerprint ~ sha1() on the parts that result for the model Prepare analysis objects Store each analysis object in a rda file which uses the file fingerprint as filename File will already exist when no change in analysis Don't overwrite existing files Loop over all rda files Do nothing if the analysis was run Otherwise run the analysis and update the status and status fingerprint","title":"Using hashes to track changes in analysis"},{"location":"man/AES/","text":"Create AES block cipher object Description This creates an object that can perform the Advanced Encryption Standard (AES) block cipher. Usage AES(key, mode=c(\"ECB\", \"CBC\", \"CFB\", \"CTR\"), IV=NULL, padding=FALSE) Arguments key The key as a 16, 24 or 32 byte raw vector for AES-128, AES-192 or AES-256 respectively. mode The encryption mode to use. Currently only \u201celectronic codebook\u201d (ECB), \u201ccipher-block chaining\u201d (CBC), \u201ccipher feedback\u201d (CFB) and \u201ccounter\u201d (CTR) modes are supported. IV The initial vector for CBC and CFB mode or initial counter for CTR mode. padding Whether or not PKCS#7 padding is used during encryption and decryption in CBC mode. Details The standard NIST definition of CTR mode doesn't define how the counter is updated, it just requires that it be updated with each block and not repeat itself for a long time. This implementation treats it as a 128 bit integer and adds 1 with each successive block. Value An object of class \"AES\" . This is a list containing the following component functions: encrypt(text) A function to encrypt a text vector. The text may be a single element character vector or a raw vector. It returns the ciphertext as a raw vector. decrypt(ciphertext , raw = FALSE) A function to decrypt the ciphertext. In ECB mode, the same AES object can be used for both encryption and decryption, but in CBC, CFB and CTR modes a new object needs to be created, using the same initial key and IV values. Returns a single element character vector, or a raw vector if raw = TRUE . IV() Report on the current state of the initialization vector. As blocks are encrypted or decrypted in CBC, CFB or CTR mode, the initialization vector is updated, so both operations can be performed sequentially on subsets of the text or ciphertext. block_size() , key_size() , mode() Report on these aspects of the AES object. Author(s) The R interface was written by Duncan Murdoch. The design is loosely based on the Python Crypto implementation. The underlying AES implementation is by Christophe Devine. References United States National Institute of Standards and Technology (2001). \"Announcing the ADVANCED ENCRYPTION STANDARD (AES)\". Federal Information Processing Standards Publication 197. https://csrc.nist.gov/publications/fips/fips197/fips-197.pdf . Morris Dworkin (2001). \"Recommendation for Block Cipher Modes of Operation\". NIST Special Publication 800-38A 2001 Edition. Examples # First in ECB mode: the repeated block is coded the same way each time msg <- as.raw(c(1:16, 1:16)) key <- as.raw(1:16) aes <- AES(key, mode=\"ECB\") aes$encrypt(msg) aes$decrypt(aes$encrypt(msg), raw=TRUE) # Now in CBC mode: each encoding is different iv <- sample(0:255, 16, replace=TRUE) aes <- AES(key, mode=\"CBC\", iv) code <- aes$encrypt(msg) code # Need a new object for decryption in CBC mode aes <- AES(key, mode=\"CBC\", iv) aes$decrypt(code, raw=TRUE) # In CBC mode, the input length must be a multiple of 16 bytes. # You can use `padding = TRUE` to ensure the input length is always valid. AES(key, mode=\"CBC\", iv, padding = TRUE)$encrypt(as.raw(1:15)) # CFB mode: IV must be the same length as the Block's block size # Two different instances of AES are required for encryption and decryption iv <- sample(0:255, 16, replace=TRUE) aes <- AES(key, mode=\"CFB\", iv) code <- aes$encrypt(msg) code #decrypt aes <- AES(key, mode=\"CFB\", iv) aes$decrypt(code) # FIPS-197 examples hextextToRaw <- function(text) { vals <- matrix(as.integer(as.hexmode(strsplit(text, \"\")[[1]])), ncol=2, byrow=TRUE) vals <- vals %*% c(16, 1) as.raw(vals) } plaintext <- hextextToRaw(\"00112233445566778899aabbccddeeff\") aes128key <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f\") aes128output <- hextextToRaw(\"69c4e0d86a7b0430d8cdb78070b4c55a\") aes <- AES(aes128key) aes128 <- aes$encrypt(plaintext) stopifnot(identical(aes128, aes128output)) stopifnot(identical(plaintext, aes$decrypt(aes128, raw=TRUE))) aes192key <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f1011121314151617\") aes192output <- hextextToRaw(\"dda97ca4864cdfe06eaf70a0ec0d7191\") aes <- AES(aes192key) aes192 <- aes$encrypt(plaintext) stopifnot(identical(aes192, aes192output)) stopifnot(identical(plaintext, aes$decrypt(aes192, raw=TRUE))) aes256key <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\") aes256output <- hextextToRaw(\"8ea2b7ca516745bfeafc49904b496089\") aes <- AES(aes256key) aes256 <- aes$encrypt(plaintext) stopifnot(identical(aes256, aes256output)) stopifnot(identical(plaintext, aes$decrypt(aes256, raw=TRUE))) # SP800-38a examples plaintext <- hextextToRaw(paste(\"6bc1bee22e409f96e93d7e117393172a\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"f69f2445df4f9b17ad2b417be66c3710\",sep=\"\")) key <- hextextToRaw(\"2b7e151628aed2a6abf7158809cf4f3c\") ecb128output <- hextextToRaw(paste(\"3ad77bb40d7a3660a89ecaf32466ef97\", \"f5d3d58503b9699de785895a96fdbaaf\", \"43b1cd7f598ece23881b00e3ed030688\", \"7b0c785e27e8ad3f8223207104725dd4\",sep=\"\")) aes <- AES(key) ecb128 <- aes$encrypt(plaintext) stopifnot(identical(ecb128, ecb128output)) stopifnot(identical(plaintext, aes$decrypt(ecb128, raw=TRUE))) cbc128output <- hextextToRaw(paste(\"7649abac8119b246cee98e9b12e9197d\", \"5086cb9b507219ee95db113a917678b2\", \"73bed6b8e3c1743b7116e69e22229516\", \"3ff1caa1681fac09120eca307586e1a7\",sep=\"\")) iv <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f\") aes <- AES(key, mode=\"CBC\", IV=iv) cbc128 <- aes$encrypt(plaintext) stopifnot(identical(cbc128, cbc128output)) aes <- AES(key, mode=\"CBC\", IV=iv) stopifnot(identical(plaintext, aes$decrypt(cbc128, raw=TRUE))) cfb128output <- hextextToRaw(paste(\"3b3fd92eb72dad20333449f8e83cfb4a\", \"c8a64537a0b3a93fcde3cdad9f1ce58b\", \"26751f67a3cbb140b1808cf187a4f4df\", \"c04b05357c5d1c0eeac4c66f9ff7f2e6\",sep=\"\")) aes <- AES(key, mode=\"CFB\", IV=iv) cfb128 <- aes$encrypt(plaintext) stopifnot(identical(cfb128, cfb128output)) aes <- AES(key, mode=\"CFB\", IV=iv) stopifnot(identical(plaintext, aes$decrypt(cfb128, raw=TRUE))) ctr128output <- hextextToRaw(paste(\"874d6191b620e3261bef6864990db6ce\", \"9806f66b7970fdff8617187bb9fffdff\", \"5ae4df3edbd5d35e5b4f09020db03eab\", \"1e031dda2fbe03d1792170a0f3009cee\",sep=\"\")) iv <- hextextToRaw(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\") aes <- AES(key, mode=\"CTR\", IV=iv) ctr128 <- aes$encrypt(plaintext) stopifnot(identical(ctr128, ctr128output)) aes <- AES(key, mode=\"CTR\", IV=iv) stopifnot(identical(plaintext, aes$decrypt(ctr128, raw=TRUE)))","title":"AES"},{"location":"man/AES/#create-aes-block-cipher-object","text":"","title":"Create AES block cipher object"},{"location":"man/AES/#description","text":"This creates an object that can perform the Advanced Encryption Standard (AES) block cipher.","title":"Description"},{"location":"man/AES/#usage","text":"AES(key, mode=c(\"ECB\", \"CBC\", \"CFB\", \"CTR\"), IV=NULL, padding=FALSE)","title":"Usage"},{"location":"man/AES/#arguments","text":"key The key as a 16, 24 or 32 byte raw vector for AES-128, AES-192 or AES-256 respectively. mode The encryption mode to use. Currently only \u201celectronic codebook\u201d (ECB), \u201ccipher-block chaining\u201d (CBC), \u201ccipher feedback\u201d (CFB) and \u201ccounter\u201d (CTR) modes are supported. IV The initial vector for CBC and CFB mode or initial counter for CTR mode. padding Whether or not PKCS#7 padding is used during encryption and decryption in CBC mode.","title":"Arguments"},{"location":"man/AES/#details","text":"The standard NIST definition of CTR mode doesn't define how the counter is updated, it just requires that it be updated with each block and not repeat itself for a long time. This implementation treats it as a 128 bit integer and adds 1 with each successive block.","title":"Details"},{"location":"man/AES/#value","text":"An object of class \"AES\" . This is a list containing the following component functions: encrypt(text) A function to encrypt a text vector. The text may be a single element character vector or a raw vector. It returns the ciphertext as a raw vector. decrypt(ciphertext , raw = FALSE) A function to decrypt the ciphertext. In ECB mode, the same AES object can be used for both encryption and decryption, but in CBC, CFB and CTR modes a new object needs to be created, using the same initial key and IV values. Returns a single element character vector, or a raw vector if raw = TRUE . IV() Report on the current state of the initialization vector. As blocks are encrypted or decrypted in CBC, CFB or CTR mode, the initialization vector is updated, so both operations can be performed sequentially on subsets of the text or ciphertext. block_size() , key_size() , mode() Report on these aspects of the AES object.","title":"Value"},{"location":"man/AES/#authors","text":"The R interface was written by Duncan Murdoch. The design is loosely based on the Python Crypto implementation. The underlying AES implementation is by Christophe Devine.","title":"Author(s)"},{"location":"man/AES/#references","text":"United States National Institute of Standards and Technology (2001). \"Announcing the ADVANCED ENCRYPTION STANDARD (AES)\". Federal Information Processing Standards Publication 197. https://csrc.nist.gov/publications/fips/fips197/fips-197.pdf . Morris Dworkin (2001). \"Recommendation for Block Cipher Modes of Operation\". NIST Special Publication 800-38A 2001 Edition.","title":"References"},{"location":"man/AES/#examples","text":"# First in ECB mode: the repeated block is coded the same way each time msg <- as.raw(c(1:16, 1:16)) key <- as.raw(1:16) aes <- AES(key, mode=\"ECB\") aes$encrypt(msg) aes$decrypt(aes$encrypt(msg), raw=TRUE) # Now in CBC mode: each encoding is different iv <- sample(0:255, 16, replace=TRUE) aes <- AES(key, mode=\"CBC\", iv) code <- aes$encrypt(msg) code # Need a new object for decryption in CBC mode aes <- AES(key, mode=\"CBC\", iv) aes$decrypt(code, raw=TRUE) # In CBC mode, the input length must be a multiple of 16 bytes. # You can use `padding = TRUE` to ensure the input length is always valid. AES(key, mode=\"CBC\", iv, padding = TRUE)$encrypt(as.raw(1:15)) # CFB mode: IV must be the same length as the Block's block size # Two different instances of AES are required for encryption and decryption iv <- sample(0:255, 16, replace=TRUE) aes <- AES(key, mode=\"CFB\", iv) code <- aes$encrypt(msg) code #decrypt aes <- AES(key, mode=\"CFB\", iv) aes$decrypt(code) # FIPS-197 examples hextextToRaw <- function(text) { vals <- matrix(as.integer(as.hexmode(strsplit(text, \"\")[[1]])), ncol=2, byrow=TRUE) vals <- vals %*% c(16, 1) as.raw(vals) } plaintext <- hextextToRaw(\"00112233445566778899aabbccddeeff\") aes128key <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f\") aes128output <- hextextToRaw(\"69c4e0d86a7b0430d8cdb78070b4c55a\") aes <- AES(aes128key) aes128 <- aes$encrypt(plaintext) stopifnot(identical(aes128, aes128output)) stopifnot(identical(plaintext, aes$decrypt(aes128, raw=TRUE))) aes192key <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f1011121314151617\") aes192output <- hextextToRaw(\"dda97ca4864cdfe06eaf70a0ec0d7191\") aes <- AES(aes192key) aes192 <- aes$encrypt(plaintext) stopifnot(identical(aes192, aes192output)) stopifnot(identical(plaintext, aes$decrypt(aes192, raw=TRUE))) aes256key <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\") aes256output <- hextextToRaw(\"8ea2b7ca516745bfeafc49904b496089\") aes <- AES(aes256key) aes256 <- aes$encrypt(plaintext) stopifnot(identical(aes256, aes256output)) stopifnot(identical(plaintext, aes$decrypt(aes256, raw=TRUE))) # SP800-38a examples plaintext <- hextextToRaw(paste(\"6bc1bee22e409f96e93d7e117393172a\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"f69f2445df4f9b17ad2b417be66c3710\",sep=\"\")) key <- hextextToRaw(\"2b7e151628aed2a6abf7158809cf4f3c\") ecb128output <- hextextToRaw(paste(\"3ad77bb40d7a3660a89ecaf32466ef97\", \"f5d3d58503b9699de785895a96fdbaaf\", \"43b1cd7f598ece23881b00e3ed030688\", \"7b0c785e27e8ad3f8223207104725dd4\",sep=\"\")) aes <- AES(key) ecb128 <- aes$encrypt(plaintext) stopifnot(identical(ecb128, ecb128output)) stopifnot(identical(plaintext, aes$decrypt(ecb128, raw=TRUE))) cbc128output <- hextextToRaw(paste(\"7649abac8119b246cee98e9b12e9197d\", \"5086cb9b507219ee95db113a917678b2\", \"73bed6b8e3c1743b7116e69e22229516\", \"3ff1caa1681fac09120eca307586e1a7\",sep=\"\")) iv <- hextextToRaw(\"000102030405060708090a0b0c0d0e0f\") aes <- AES(key, mode=\"CBC\", IV=iv) cbc128 <- aes$encrypt(plaintext) stopifnot(identical(cbc128, cbc128output)) aes <- AES(key, mode=\"CBC\", IV=iv) stopifnot(identical(plaintext, aes$decrypt(cbc128, raw=TRUE))) cfb128output <- hextextToRaw(paste(\"3b3fd92eb72dad20333449f8e83cfb4a\", \"c8a64537a0b3a93fcde3cdad9f1ce58b\", \"26751f67a3cbb140b1808cf187a4f4df\", \"c04b05357c5d1c0eeac4c66f9ff7f2e6\",sep=\"\")) aes <- AES(key, mode=\"CFB\", IV=iv) cfb128 <- aes$encrypt(plaintext) stopifnot(identical(cfb128, cfb128output)) aes <- AES(key, mode=\"CFB\", IV=iv) stopifnot(identical(plaintext, aes$decrypt(cfb128, raw=TRUE))) ctr128output <- hextextToRaw(paste(\"874d6191b620e3261bef6864990db6ce\", \"9806f66b7970fdff8617187bb9fffdff\", \"5ae4df3edbd5d35e5b4f09020db03eab\", \"1e031dda2fbe03d1792170a0f3009cee\",sep=\"\")) iv <- hextextToRaw(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\") aes <- AES(key, mode=\"CTR\", IV=iv) ctr128 <- aes$encrypt(plaintext) stopifnot(identical(ctr128, ctr128output)) aes <- AES(key, mode=\"CTR\", IV=iv) stopifnot(identical(plaintext, aes$decrypt(ctr128, raw=TRUE)))","title":"Examples"},{"location":"man/digest/","text":"Create hash function digests for arbitrary R objects or files Description The digest function applies one of several cryptographic or non-cryptographics hash function to arbitrary R objects or files. By default, the objects are internally serialized, and the selected hash functions algorithms can be used to compute a compact digest of the serialized object. In order to compare this implementation with others, serialization of the input argument can also be turned off in which the input argument must be a character string for which its digest is returned. Usage digest(object, algo=c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\", \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\", \"blake3\", \"crc32c\", \"xxh3_64\", \"xxh3_128\"), serialize=TRUE, file=FALSE, length=Inf, skip=\"auto\", ascii=FALSE, raw=FALSE, seed=0, errormode=c(\"stop\",\"warn\",\"silent\"), serializeVersion=.getSerializeVersion()) Arguments object An arbitrary R object which will then be passed to the serialize function, unless the serialize argument is set to FALSE . algo The algorithms to be used; currently available choices are md5 , which is also the default, sha1 , crc32 , sha256 , sha512 , xxhash32 , xxhash64 , murmur32 , spookyhash , blake3 , crc32c , xxh3_64 , and xxh3_128 . serialize A logical variable indicating whether the object should be serialized using serialize (in ASCII form). Setting this to FALSE allows to compare the digest output of given character strings to known control output. It also allows the use of raw vectors such as the output of non-ASCII serialization. file A logical variable indicating whether the object is a file name or a file name if object is not specified. length Number of characters to process. By default, when length is set to Inf , the whole string or file is processed. skip Number of input bytes to skip before calculating the digest. Negative values are invalid and currently treated as zero. Special value \"auto\" will cause serialization header to be skipped if serialize is set to TRUE (the serialization header contains the R version number thus skipping it allows the comparison of hashes across platforms and some R versions). ascii This flag is passed to the serialize function if serialize is set to TRUE , determining whether the hash is computed on the ASCII or binary representation. raw A logical variable with a default value of FALSE, implying digest returns digest output as ASCII hex values. Set to TRUE to return digest output in raw (binary) form. seed an integer to seed the random number generator. This is only used in the xxhash32 , xxhash64 and murmur32 functions and can be used to generate additional hashes for the same input if desired. errormode A character value denoting a choice for the behaviour in the case of error: \u2018stop\u2019 aborts (and is the default value), \u2018warn\u2019 emits a warning and returns NULL and \u2018silent\u2019 suppresses the error and returns an empty string. serializeVersion An integer value specifying the internal version of the serialization format, with 2 being the default; see serialize for details. The serializeVersion field of option can also be used to set a different value. Details Cryptographic hash functions are well researched and documented. The MD5 algorithm by Ron Rivest is specified in RFC 1321. The SHA-1 algorithm is specified in FIPS-180-1, SHA-2 is described in FIPS-180-2. For md5, sha-1 and sha-256, this R implementation relies on standalone implementations in C by Christophe Devine. For crc32, code from the zlib library by Jean-loup Gailly and Mark Adler is used. For sha-512, a standalone implementation from Aaron Gifford is used. For xxhash32, xxhash64, xxh3_64 and xxh3_128 the reference implementation by Yann Collet is used. For murmur32, the progressive implementation by Shane Day is used. For spookyhash, the original source code by Bob Jenkins is used. The R implementation that integrates R's serialization directly with the algorithm allowing for memory-efficient incremental calculation of the hash is by Gabe Becker. For blake3, the C implementation by Samuel Neves and Jack O'Connor is used. For crc32c, the portable (i.e. non-hardware accelerated) version from Google is used. Please note that this package is not meant to be used for cryptographic purposes for which more comprehensive (and widely tested) libraries such as OpenSSL should be used. Also, it is known that crc32 is not collision-proof. For sha-1, recent results indicate certain cryptographic weaknesses as well. For more details, see for example https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html . Value The digest function returns a character string of a fixed length containing the requested digest of the supplied R object. This string is of length 32 for MD5; of length 40 for SHA-1; of length 8 for CRC32 a string; of length 8 for for xxhash32; of length 16 for xxhash64; and of length 8 for murmur32. Change Management Version 0.6.16 of digest corrects an error in which crc32 was not guaranteeing an eight-character return. We now pad with zero to always return eight characters. Should the previous behaviour be required, set option(\"digestOldCRC32Format\"=TRUE) and the output will be consistent with prior version (but not be consistently eight characters). Author(s) Dirk Eddelbuettel edd@debian.org for the R interface; Antoine Lucas for the integration of crc32; Jarek Tuszynski for the file-based operations; Henrik Bengtsson and Simon Urbanek for improved serialization patches; Christophe Devine for the hash function implementations for sha-1, sha-256 and md5; Jean-loup Gailly and Mark Adler for crc32; Hannes Muehleisen for the integration of sha-512; Jim Hester for the integration of xxhash32, xxhash64 and murmur32; Kendon Bell for the integration of spookyhash using Gabe Becker's R package fastdigest. References MD5: https://www.ietf.org/rfc/rfc1321.txt . SHA-1: https://en.wikipedia.org/wiki/SHA-1 . SHA-256: https://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf . CRC32: The original reference webpage at rocksoft.com has vanished from the web; see https://en.wikipedia.org/wiki/Cyclic_redundancy_check for general information on CRC algorithms. https://aarongifford.com/computers/sha.html for the integrated C implementation of sha-512. The page for the code underlying the C functions used here for sha-1 and md5, and further references, is no longer accessible. Please see https://en.wikipedia.org/wiki/SHA-1 and https://en.wikipedia.org/wiki/MD5 . https://zlib.net for documentation on the zlib library which supplied the code for crc32. https://en.wikipedia.org/wiki/SHA_hash_functions for documentation on the sha functions. https://github.com/Cyan4973/xxHash for documentation on the xxHash functions. https://github.com/aappleby/smhasher for documentation on MurmurHash. https://burtleburtle.net/bob/hash/spooky.html for the original source code of SpookyHash. https://github.com/BLAKE3-team/BLAKE3/ for the original source code of blake3. https://github.com/google/crc32c for the (non-hardware-accelerated) crc32c code. See Also serialize , md5sum Examples ## Standard RFC 1321 test vectors md5Input <- c(\"\", \"a\", \"abc\", \"message digest\", \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", paste(\"12345678901234567890123456789012345678901234567890123456789012\", \"345678901234567890\", sep=\"\")) md5Output <- c(\"d41d8cd98f00b204e9800998ecf8427e\", \"0cc175b9c0f1b6a831c399e269772661\", \"900150983cd24fb0d6963f7d28e17f72\", \"f96b697d7cb7938d525a2f31aaf161d0\", \"c3fcd3d76192e4007dfb496cca67e13b\", \"d174ab98d277d9f5a5611c2c9f419d9f\", \"57edf4a22be3c955ac49da2e2107b67a\") for (i in seq(along=md5Input)) { md5 <- digest(md5Input[i], serialize=FALSE) stopifnot(identical(md5, md5Output[i])) } sha1Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") sha1Output <- c(\"a9993e364706816aba3e25717850c26c9cd0d89d\", \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\") for (i in seq(along=sha1Input)) { sha1 <- digest(sha1Input[i], algo=\"sha1\", serialize=FALSE) stopifnot(identical(sha1, sha1Output[i])) } crc32Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") crc32Output <- c(\"352441c2\", \"171a3f5f\") for (i in seq(along=crc32Input)) { crc32 <- digest(crc32Input[i], algo=\"crc32\", serialize=FALSE) stopifnot(identical(crc32, crc32Output[i])) } sha256Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") sha256Output <- c(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\", \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\") for (i in seq(along=sha256Input)) { sha256 <- digest(sha256Input[i], algo=\"sha256\", serialize=FALSE) stopifnot(identical(sha256, sha256Output[i])) } # SHA 512 example sha512Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") sha512Output <- c(paste(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\", \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\", sep=\"\"), paste(\"204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c335\", \"96fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445\", sep=\"\")) for (i in seq(along=sha512Input)) { sha512 <- digest(sha512Input[i], algo=\"sha512\", serialize=FALSE) stopifnot(identical(sha512, sha512Output[i])) } ## xxhash32 example xxhash32Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") xxhash32Output <- c(\"32d153ff\", \"89ea60c3\", \"02cc5d05\") for (i in seq(along=xxhash32Input)) { xxhash32 <- digest(xxhash32Input[i], algo=\"xxhash32\", serialize=FALSE) cat(xxhash32, \"\\n\") stopifnot(identical(xxhash32, xxhash32Output[i])) } ## xxhash64 example xxhash64Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") xxhash64Output <- c(\"44bc2cf5ad770999\", \"f06103773e8585df\", \"ef46db3751d8e999\") for (i in seq(along=xxhash64Input)) { xxhash64 <- digest(xxhash64Input[i], algo=\"xxhash64\", serialize=FALSE) cat(xxhash64, \"\\n\") stopifnot(identical(xxhash64, xxhash64Output[i])) } ## these outputs were calculated using mmh3 python package murmur32Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") murmur32Output <- c(\"b3dd93fa\", \"ee925b90\", \"00000000\") for (i in seq(along=murmur32Input)) { murmur32 <- digest(murmur32Input[i], algo=\"murmur32\", serialize=FALSE) cat(murmur32, \"\\n\") stopifnot(identical(murmur32, murmur32Output[i])) } ## these outputs were calculated using spooky python package spookyInput <- c(\"a\", \"abc\", \"message digest\") spookyOutput <- c(\"bdc9bba09181101a922a4161f0584275\", \"67c93775f715ab8ab01178caf86713c6\", \"9630c2a55c0987a0db44434f9d67a192\") for (i in seq(along=spookyInput)) { # skip = 30 skips the serialization header and just hashes the strings spooky <- digest(spookyInput[i], algo=\"spookyhash\", skip = 30) cat(spooky, \"\\n\") ## we can only compare to reference output on little-endian systems if (isTRUE(.Call(digest:::is_little_endian))) stopifnot(identical(spooky, spookyOutput[i])) } ## blake3 example blake3Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") blake3Output <- c(\"6437b3ac38465133ffb63b75273a8db548c558465d79db03fd359c6cd5bd9d85\", \"c19012cc2aaf0dc3d8e5c45a1b79114d2df42abb2a410bf54be09e891af06ff8\", \"af1349b9f5f9a1a6a0404dea36dcc9499bcb25c9adc112b7cc9a93cae41f3262\") for (i in seq(along=blake3Input)) { blake3 <- digest(blake3Input[i], algo=\"blake3\", serialize=FALSE) cat(blake3, \"\\n\") stopifnot(identical(blake3, blake3Output[i])) } ## crc32c crc32cInput <- c(\"123456789\", \"The quick brown fox jumps over the lazy dog\") crc32cOutput <- c(\"e3069283\", \"22620404\") for (i in seq_along(crc32cInput)) { crc32c <- digest(crc32cInput[i], algo=\"crc32c\", serialize=FALSE) cat(crc32c, \"\\n\") stopifnot(identical(crc32c, crc32cOutput[i])) } # example of a digest of a standard R list structure digest(list(LETTERS, data.frame(a=letters[1:5], b=matrix(1:10,ncol=2)))) # test 'length' parameter and file input fname <- file.path(R.home(),\"COPYING\") x <- readChar(fname, file.info(fname)$size) # read file for (alg in c(\"sha1\", \"md5\", \"crc32\")) { # partial file h1 <- digest(x , length=18000, algo=alg, serialize=FALSE) h2 <- digest(fname, length=18000, algo=alg, serialize=FALSE, file=TRUE) h3 <- digest( substr(x,1,18000) , algo=alg, serialize=FALSE) stopifnot( identical(h1,h2), identical(h1,h3) ) # whole file h1 <- digest(x , algo=alg, serialize=FALSE) h2 <- digest(fname, algo=alg, serialize=FALSE, file=TRUE) stopifnot( identical(h1,h2) ) } # compare md5 algorithm to other tools library(tools) fname <- file.path(R.home(),\"COPYING\") h1 <- as.character(md5sum(fname)) h2 <- digest(fname, algo=\"md5\", file=TRUE) stopifnot( identical(h1,h2) ) ## digest is _designed_ to return one has summary per object to for a desired ## For vectorised output see digest::getVDigest() which provides ## better performance than base::Vectorize() md5 <- getVDigest() v <- md5(1:5) # digest integers 1 to 5 stopifnot(identical(v[1], digest(1L)), # check first and third result identical(v[3], digest(3L)))","title":"Digest"},{"location":"man/digest/#create-hash-function-digests-for-arbitrary-r-objects-or-files","text":"","title":"Create hash function digests for arbitrary R objects or files"},{"location":"man/digest/#description","text":"The digest function applies one of several cryptographic or non-cryptographics hash function to arbitrary R objects or files. By default, the objects are internally serialized, and the selected hash functions algorithms can be used to compute a compact digest of the serialized object. In order to compare this implementation with others, serialization of the input argument can also be turned off in which the input argument must be a character string for which its digest is returned.","title":"Description"},{"location":"man/digest/#usage","text":"digest(object, algo=c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\", \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\", \"blake3\", \"crc32c\", \"xxh3_64\", \"xxh3_128\"), serialize=TRUE, file=FALSE, length=Inf, skip=\"auto\", ascii=FALSE, raw=FALSE, seed=0, errormode=c(\"stop\",\"warn\",\"silent\"), serializeVersion=.getSerializeVersion())","title":"Usage"},{"location":"man/digest/#arguments","text":"object An arbitrary R object which will then be passed to the serialize function, unless the serialize argument is set to FALSE . algo The algorithms to be used; currently available choices are md5 , which is also the default, sha1 , crc32 , sha256 , sha512 , xxhash32 , xxhash64 , murmur32 , spookyhash , blake3 , crc32c , xxh3_64 , and xxh3_128 . serialize A logical variable indicating whether the object should be serialized using serialize (in ASCII form). Setting this to FALSE allows to compare the digest output of given character strings to known control output. It also allows the use of raw vectors such as the output of non-ASCII serialization. file A logical variable indicating whether the object is a file name or a file name if object is not specified. length Number of characters to process. By default, when length is set to Inf , the whole string or file is processed. skip Number of input bytes to skip before calculating the digest. Negative values are invalid and currently treated as zero. Special value \"auto\" will cause serialization header to be skipped if serialize is set to TRUE (the serialization header contains the R version number thus skipping it allows the comparison of hashes across platforms and some R versions). ascii This flag is passed to the serialize function if serialize is set to TRUE , determining whether the hash is computed on the ASCII or binary representation. raw A logical variable with a default value of FALSE, implying digest returns digest output as ASCII hex values. Set to TRUE to return digest output in raw (binary) form. seed an integer to seed the random number generator. This is only used in the xxhash32 , xxhash64 and murmur32 functions and can be used to generate additional hashes for the same input if desired. errormode A character value denoting a choice for the behaviour in the case of error: \u2018stop\u2019 aborts (and is the default value), \u2018warn\u2019 emits a warning and returns NULL and \u2018silent\u2019 suppresses the error and returns an empty string. serializeVersion An integer value specifying the internal version of the serialization format, with 2 being the default; see serialize for details. The serializeVersion field of option can also be used to set a different value.","title":"Arguments"},{"location":"man/digest/#details","text":"Cryptographic hash functions are well researched and documented. The MD5 algorithm by Ron Rivest is specified in RFC 1321. The SHA-1 algorithm is specified in FIPS-180-1, SHA-2 is described in FIPS-180-2. For md5, sha-1 and sha-256, this R implementation relies on standalone implementations in C by Christophe Devine. For crc32, code from the zlib library by Jean-loup Gailly and Mark Adler is used. For sha-512, a standalone implementation from Aaron Gifford is used. For xxhash32, xxhash64, xxh3_64 and xxh3_128 the reference implementation by Yann Collet is used. For murmur32, the progressive implementation by Shane Day is used. For spookyhash, the original source code by Bob Jenkins is used. The R implementation that integrates R's serialization directly with the algorithm allowing for memory-efficient incremental calculation of the hash is by Gabe Becker. For blake3, the C implementation by Samuel Neves and Jack O'Connor is used. For crc32c, the portable (i.e. non-hardware accelerated) version from Google is used. Please note that this package is not meant to be used for cryptographic purposes for which more comprehensive (and widely tested) libraries such as OpenSSL should be used. Also, it is known that crc32 is not collision-proof. For sha-1, recent results indicate certain cryptographic weaknesses as well. For more details, see for example https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html .","title":"Details"},{"location":"man/digest/#value","text":"The digest function returns a character string of a fixed length containing the requested digest of the supplied R object. This string is of length 32 for MD5; of length 40 for SHA-1; of length 8 for CRC32 a string; of length 8 for for xxhash32; of length 16 for xxhash64; and of length 8 for murmur32.","title":"Value"},{"location":"man/digest/#change-management","text":"Version 0.6.16 of digest corrects an error in which crc32 was not guaranteeing an eight-character return. We now pad with zero to always return eight characters. Should the previous behaviour be required, set option(\"digestOldCRC32Format\"=TRUE) and the output will be consistent with prior version (but not be consistently eight characters).","title":"Change Management"},{"location":"man/digest/#authors","text":"Dirk Eddelbuettel edd@debian.org for the R interface; Antoine Lucas for the integration of crc32; Jarek Tuszynski for the file-based operations; Henrik Bengtsson and Simon Urbanek for improved serialization patches; Christophe Devine for the hash function implementations for sha-1, sha-256 and md5; Jean-loup Gailly and Mark Adler for crc32; Hannes Muehleisen for the integration of sha-512; Jim Hester for the integration of xxhash32, xxhash64 and murmur32; Kendon Bell for the integration of spookyhash using Gabe Becker's R package fastdigest.","title":"Author(s)"},{"location":"man/digest/#references","text":"MD5: https://www.ietf.org/rfc/rfc1321.txt . SHA-1: https://en.wikipedia.org/wiki/SHA-1 . SHA-256: https://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf . CRC32: The original reference webpage at rocksoft.com has vanished from the web; see https://en.wikipedia.org/wiki/Cyclic_redundancy_check for general information on CRC algorithms. https://aarongifford.com/computers/sha.html for the integrated C implementation of sha-512. The page for the code underlying the C functions used here for sha-1 and md5, and further references, is no longer accessible. Please see https://en.wikipedia.org/wiki/SHA-1 and https://en.wikipedia.org/wiki/MD5 . https://zlib.net for documentation on the zlib library which supplied the code for crc32. https://en.wikipedia.org/wiki/SHA_hash_functions for documentation on the sha functions. https://github.com/Cyan4973/xxHash for documentation on the xxHash functions. https://github.com/aappleby/smhasher for documentation on MurmurHash. https://burtleburtle.net/bob/hash/spooky.html for the original source code of SpookyHash. https://github.com/BLAKE3-team/BLAKE3/ for the original source code of blake3. https://github.com/google/crc32c for the (non-hardware-accelerated) crc32c code.","title":"References"},{"location":"man/digest/#see-also","text":"serialize , md5sum","title":"See Also"},{"location":"man/digest/#examples","text":"## Standard RFC 1321 test vectors md5Input <- c(\"\", \"a\", \"abc\", \"message digest\", \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", paste(\"12345678901234567890123456789012345678901234567890123456789012\", \"345678901234567890\", sep=\"\")) md5Output <- c(\"d41d8cd98f00b204e9800998ecf8427e\", \"0cc175b9c0f1b6a831c399e269772661\", \"900150983cd24fb0d6963f7d28e17f72\", \"f96b697d7cb7938d525a2f31aaf161d0\", \"c3fcd3d76192e4007dfb496cca67e13b\", \"d174ab98d277d9f5a5611c2c9f419d9f\", \"57edf4a22be3c955ac49da2e2107b67a\") for (i in seq(along=md5Input)) { md5 <- digest(md5Input[i], serialize=FALSE) stopifnot(identical(md5, md5Output[i])) } sha1Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") sha1Output <- c(\"a9993e364706816aba3e25717850c26c9cd0d89d\", \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\") for (i in seq(along=sha1Input)) { sha1 <- digest(sha1Input[i], algo=\"sha1\", serialize=FALSE) stopifnot(identical(sha1, sha1Output[i])) } crc32Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") crc32Output <- c(\"352441c2\", \"171a3f5f\") for (i in seq(along=crc32Input)) { crc32 <- digest(crc32Input[i], algo=\"crc32\", serialize=FALSE) stopifnot(identical(crc32, crc32Output[i])) } sha256Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") sha256Output <- c(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\", \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\") for (i in seq(along=sha256Input)) { sha256 <- digest(sha256Input[i], algo=\"sha256\", serialize=FALSE) stopifnot(identical(sha256, sha256Output[i])) } # SHA 512 example sha512Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\") sha512Output <- c(paste(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\", \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\", sep=\"\"), paste(\"204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c335\", \"96fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445\", sep=\"\")) for (i in seq(along=sha512Input)) { sha512 <- digest(sha512Input[i], algo=\"sha512\", serialize=FALSE) stopifnot(identical(sha512, sha512Output[i])) } ## xxhash32 example xxhash32Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") xxhash32Output <- c(\"32d153ff\", \"89ea60c3\", \"02cc5d05\") for (i in seq(along=xxhash32Input)) { xxhash32 <- digest(xxhash32Input[i], algo=\"xxhash32\", serialize=FALSE) cat(xxhash32, \"\\n\") stopifnot(identical(xxhash32, xxhash32Output[i])) } ## xxhash64 example xxhash64Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") xxhash64Output <- c(\"44bc2cf5ad770999\", \"f06103773e8585df\", \"ef46db3751d8e999\") for (i in seq(along=xxhash64Input)) { xxhash64 <- digest(xxhash64Input[i], algo=\"xxhash64\", serialize=FALSE) cat(xxhash64, \"\\n\") stopifnot(identical(xxhash64, xxhash64Output[i])) } ## these outputs were calculated using mmh3 python package murmur32Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") murmur32Output <- c(\"b3dd93fa\", \"ee925b90\", \"00000000\") for (i in seq(along=murmur32Input)) { murmur32 <- digest(murmur32Input[i], algo=\"murmur32\", serialize=FALSE) cat(murmur32, \"\\n\") stopifnot(identical(murmur32, murmur32Output[i])) } ## these outputs were calculated using spooky python package spookyInput <- c(\"a\", \"abc\", \"message digest\") spookyOutput <- c(\"bdc9bba09181101a922a4161f0584275\", \"67c93775f715ab8ab01178caf86713c6\", \"9630c2a55c0987a0db44434f9d67a192\") for (i in seq(along=spookyInput)) { # skip = 30 skips the serialization header and just hashes the strings spooky <- digest(spookyInput[i], algo=\"spookyhash\", skip = 30) cat(spooky, \"\\n\") ## we can only compare to reference output on little-endian systems if (isTRUE(.Call(digest:::is_little_endian))) stopifnot(identical(spooky, spookyOutput[i])) } ## blake3 example blake3Input <- c(\"abc\", \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"\") blake3Output <- c(\"6437b3ac38465133ffb63b75273a8db548c558465d79db03fd359c6cd5bd9d85\", \"c19012cc2aaf0dc3d8e5c45a1b79114d2df42abb2a410bf54be09e891af06ff8\", \"af1349b9f5f9a1a6a0404dea36dcc9499bcb25c9adc112b7cc9a93cae41f3262\") for (i in seq(along=blake3Input)) { blake3 <- digest(blake3Input[i], algo=\"blake3\", serialize=FALSE) cat(blake3, \"\\n\") stopifnot(identical(blake3, blake3Output[i])) } ## crc32c crc32cInput <- c(\"123456789\", \"The quick brown fox jumps over the lazy dog\") crc32cOutput <- c(\"e3069283\", \"22620404\") for (i in seq_along(crc32cInput)) { crc32c <- digest(crc32cInput[i], algo=\"crc32c\", serialize=FALSE) cat(crc32c, \"\\n\") stopifnot(identical(crc32c, crc32cOutput[i])) } # example of a digest of a standard R list structure digest(list(LETTERS, data.frame(a=letters[1:5], b=matrix(1:10,ncol=2)))) # test 'length' parameter and file input fname <- file.path(R.home(),\"COPYING\") x <- readChar(fname, file.info(fname)$size) # read file for (alg in c(\"sha1\", \"md5\", \"crc32\")) { # partial file h1 <- digest(x , length=18000, algo=alg, serialize=FALSE) h2 <- digest(fname, length=18000, algo=alg, serialize=FALSE, file=TRUE) h3 <- digest( substr(x,1,18000) , algo=alg, serialize=FALSE) stopifnot( identical(h1,h2), identical(h1,h3) ) # whole file h1 <- digest(x , algo=alg, serialize=FALSE) h2 <- digest(fname, algo=alg, serialize=FALSE, file=TRUE) stopifnot( identical(h1,h2) ) } # compare md5 algorithm to other tools library(tools) fname <- file.path(R.home(),\"COPYING\") h1 <- as.character(md5sum(fname)) h2 <- digest(fname, algo=\"md5\", file=TRUE) stopifnot( identical(h1,h2) ) ## digest is _designed_ to return one has summary per object to for a desired ## For vectorised output see digest::getVDigest() which provides ## better performance than base::Vectorize() md5 <- getVDigest() v <- md5(1:5) # digest integers 1 to 5 stopifnot(identical(v[1], digest(1L)), # check first and third result identical(v[3], digest(3L)))","title":"Examples"},{"location":"man/digest2int/","text":"hash arbitrary string to integer Description The digest2int function calculates integer hash of an arbitrary string. This is useful for randomized experiments, feature hashing, etc. Usage digest2int(x, seed = 0L) Arguments x An arbitrary character vector. seed an integer for algorithm initial state. Function will produce different hashes for same input and different seed values. Value The digest2int function returns integer vector of the same length as input vector x . Author(s) Dmitriy Selivanov selivanov.dmitriy@gmail.com for the R interface; Bob Jenkins for original implementation http://www.burtleburtle.net/bob/hash/doobs.html References Jenkins's one_at_a_time hash: https://en.wikipedia.org/wiki/Jenkins_hash_function#one_at_a_time . See Also digest Examples current <- digest2int(\"The quick brown fox jumps over the lazy dog\", 0L) target <- 1369346549L stopifnot(identical(target, current))","title":"Digest2int"},{"location":"man/digest2int/#hash-arbitrary-string-to-integer","text":"","title":"hash arbitrary string to integer"},{"location":"man/digest2int/#description","text":"The digest2int function calculates integer hash of an arbitrary string. This is useful for randomized experiments, feature hashing, etc.","title":"Description"},{"location":"man/digest2int/#usage","text":"digest2int(x, seed = 0L)","title":"Usage"},{"location":"man/digest2int/#arguments","text":"x An arbitrary character vector. seed an integer for algorithm initial state. Function will produce different hashes for same input and different seed values.","title":"Arguments"},{"location":"man/digest2int/#value","text":"The digest2int function returns integer vector of the same length as input vector x .","title":"Value"},{"location":"man/digest2int/#authors","text":"Dmitriy Selivanov selivanov.dmitriy@gmail.com for the R interface; Bob Jenkins for original implementation http://www.burtleburtle.net/bob/hash/doobs.html","title":"Author(s)"},{"location":"man/digest2int/#references","text":"Jenkins's one_at_a_time hash: https://en.wikipedia.org/wiki/Jenkins_hash_function#one_at_a_time .","title":"References"},{"location":"man/digest2int/#see-also","text":"digest","title":"See Also"},{"location":"man/digest2int/#examples","text":"current <- digest2int(\"The quick brown fox jumps over the lazy dog\", 0L) target <- 1369346549L stopifnot(identical(target, current))","title":"Examples"},{"location":"man/hmac/","text":"compute a hash-based message authentication code Description The hmac function calculates a message authentication code (MAC) involving the specified cryptographic hash function in combination with a given secret key. Usage hmac(key, object, algo = c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\"), serialize = FALSE, raw = FALSE, ...) Arguments key An arbitrary character or numeric vector, to use as pre-shared secret key. object An arbitrary R object which will then be passed to the serialize function, unless the serialize argument is set to FALSE . algo The algorithms to be used; currently available choices are md5 , which is also the default, sha1 , crc32 and sha256 . serialize default value of serialize is here FALSE, not TRUE as it is in digest . raw This flag alters the type of the output. Setting this to TRUE causes the function to return an object of type \"raw\" instead of \"character\" . ... All remaining arguments are passed to digest . Value The hmac function uses the digest to return a hash digest as specified in the RFC 2104. Author(s) Mario Frasca mfrasca@zonnet.nl . References MD5: https://www.ietf.org/rfc/rfc1321.txt . SHA-1: https://en.wikipedia.org/wiki/SHA-1 . SHA-256: https://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf . CRC32: The original reference webpage at rocksoft.com has vanished from the web; see https://en.wikipedia.org/wiki/Cyclic_redundancy_check for general information on CRC algorithms. https://aarongifford.com/computers/sha.html for the integrated C implementation of sha-512. The page for the code underlying the C functions used here for sha-1 and md5, and further references, is no longer accessible. Please see https://en.wikipedia.org/wiki/SHA-1 and https://en.wikipedia.org/wiki/MD5 . https://zlib.net for documentation on the zlib library which supplied the code for crc32. https://en.wikipedia.org/wiki/SHA_hash_functions for documentation on the sha functions. See Also digest Examples ## Standard RFC 2104 test vectors current <- hmac('Jefe', 'what do ya want for nothing?', \"md5\") target <- '750c783e6ab0b503eaa86e310a5db738' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0x0b, 16), 'Hi There', \"md5\") target <- '9294727a3638bb1c13f48ef8158bfc9d' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0xaa, 16), rep(0xdd, 50), \"md5\") target <- '56be34521d144c88dbb8c733f0e8b3f6' stopifnot(identical(target, as.character(current))) ## SHA1 tests inspired to the RFC 2104 and checked against the python ## hmac implementation. current <- hmac('Jefe', 'what do ya want for nothing?', \"sha1\") target <- 'effcdf6ae5eb2fa2d27416d5f184df9c259a7c79' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0x0b, 16), 'Hi There', \"sha1\") target <- '675b0b3a1b4ddf4e124872da6c2f632bfed957e9' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0xaa, 16), rep(0xdd, 50), \"sha1\") target <- 'd730594d167e35d5956fd8003d0db3d3f46dc7bb' stopifnot(identical(target, as.character(current)))","title":"Hmac"},{"location":"man/hmac/#compute-a-hash-based-message-authentication-code","text":"","title":"compute a hash-based message authentication code"},{"location":"man/hmac/#description","text":"The hmac function calculates a message authentication code (MAC) involving the specified cryptographic hash function in combination with a given secret key.","title":"Description"},{"location":"man/hmac/#usage","text":"hmac(key, object, algo = c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\"), serialize = FALSE, raw = FALSE, ...)","title":"Usage"},{"location":"man/hmac/#arguments","text":"key An arbitrary character or numeric vector, to use as pre-shared secret key. object An arbitrary R object which will then be passed to the serialize function, unless the serialize argument is set to FALSE . algo The algorithms to be used; currently available choices are md5 , which is also the default, sha1 , crc32 and sha256 . serialize default value of serialize is here FALSE, not TRUE as it is in digest . raw This flag alters the type of the output. Setting this to TRUE causes the function to return an object of type \"raw\" instead of \"character\" . ... All remaining arguments are passed to digest .","title":"Arguments"},{"location":"man/hmac/#value","text":"The hmac function uses the digest to return a hash digest as specified in the RFC 2104.","title":"Value"},{"location":"man/hmac/#authors","text":"Mario Frasca mfrasca@zonnet.nl .","title":"Author(s)"},{"location":"man/hmac/#references","text":"MD5: https://www.ietf.org/rfc/rfc1321.txt . SHA-1: https://en.wikipedia.org/wiki/SHA-1 . SHA-256: https://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf . CRC32: The original reference webpage at rocksoft.com has vanished from the web; see https://en.wikipedia.org/wiki/Cyclic_redundancy_check for general information on CRC algorithms. https://aarongifford.com/computers/sha.html for the integrated C implementation of sha-512. The page for the code underlying the C functions used here for sha-1 and md5, and further references, is no longer accessible. Please see https://en.wikipedia.org/wiki/SHA-1 and https://en.wikipedia.org/wiki/MD5 . https://zlib.net for documentation on the zlib library which supplied the code for crc32. https://en.wikipedia.org/wiki/SHA_hash_functions for documentation on the sha functions.","title":"References"},{"location":"man/hmac/#see-also","text":"digest","title":"See Also"},{"location":"man/hmac/#examples","text":"## Standard RFC 2104 test vectors current <- hmac('Jefe', 'what do ya want for nothing?', \"md5\") target <- '750c783e6ab0b503eaa86e310a5db738' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0x0b, 16), 'Hi There', \"md5\") target <- '9294727a3638bb1c13f48ef8158bfc9d' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0xaa, 16), rep(0xdd, 50), \"md5\") target <- '56be34521d144c88dbb8c733f0e8b3f6' stopifnot(identical(target, as.character(current))) ## SHA1 tests inspired to the RFC 2104 and checked against the python ## hmac implementation. current <- hmac('Jefe', 'what do ya want for nothing?', \"sha1\") target <- 'effcdf6ae5eb2fa2d27416d5f184df9c259a7c79' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0x0b, 16), 'Hi There', \"sha1\") target <- '675b0b3a1b4ddf4e124872da6c2f632bfed957e9' stopifnot(identical(target, as.character(current))) current <- hmac(rep(0xaa, 16), rep(0xdd, 50), \"sha1\") target <- 'd730594d167e35d5956fd8003d0db3d3f46dc7bb' stopifnot(identical(target, as.character(current)))","title":"Examples"},{"location":"man/makeRaw/","text":"Create a raw object Description A helper function used to create raw methods. Usage makeRaw(object) ## S3 method for class 'raw' makeRaw(object) ## S3 method for class 'character' makeRaw(object) ## S3 method for class 'digest' makeRaw(object) ## S3 method for class 'raw' makeRaw(object) Arguments object The object to convert into a raw vector Value A raw vector is returned. Author(s) Dirk Eddelbuettel Examples makeRaw(\"1234567890ABCDE\")","title":"makeRaw"},{"location":"man/makeRaw/#create-a-raw-object","text":"","title":"Create a raw object"},{"location":"man/makeRaw/#description","text":"A helper function used to create raw methods.","title":"Description"},{"location":"man/makeRaw/#usage","text":"makeRaw(object) ## S3 method for class 'raw' makeRaw(object) ## S3 method for class 'character' makeRaw(object) ## S3 method for class 'digest' makeRaw(object) ## S3 method for class 'raw' makeRaw(object)","title":"Usage"},{"location":"man/makeRaw/#arguments","text":"object The object to convert into a raw vector","title":"Arguments"},{"location":"man/makeRaw/#value","text":"A raw vector is returned.","title":"Value"},{"location":"man/makeRaw/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/makeRaw/#examples","text":"makeRaw(\"1234567890ABCDE\")","title":"Examples"},{"location":"man/sha1/","text":"Calculate a SHA1 hash of an object Description Calculate a SHA1 hash of an object. The main difference with digest(x, algo = \"sha1\") is that sha1() will give the same hash on 32-bit and 64-bit systems. Note that the results depends on the setting of digits and zapsmall when handling floating point numbers. The current defaults keep digits and zapsmall as large as possible while maintaining the same hash on 32 bit and 64 bit systems. Usage sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'numeric' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'complex' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'Date' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'matrix' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'data.frame' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'array' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'list' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'pairlist' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'POSIXlt' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'POSIXct' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'anova' sha1(x, digits = 4, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'function' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'formula' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class ''('' sha1(...) sha1_digest(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'NULL' sha1(...) ## S3 method for class 'name' sha1(...) sha1_attr_digest(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'call' sha1(...) ## S3 method for class 'character' sha1(...) ## S3 method for class 'factor' sha1(...) ## S3 method for class 'integer' sha1(...) ## S3 method for class 'logical' sha1(...) ## S3 method for class 'raw' sha1(...) Arguments x the object to calculate the SHA1 digits the approximate number of significant digits in base 10. Will be converted to a base 16 equivalent. Defaults to digits = 14 , except for sha1.anova where digits = 4 zapsmall the approximate negative magnitude of the smallest relevant digit. Will be converted to a base 2 equivalent. Values smaller than this number are equivalent to 0. Defaults to zapsmall = 7 ... If it is the only defined argument, passed to another sha1 method. If other arguments exist, see Details for usage. algo The hashing algorithm to be used by digest . Defaults to \"sha1\" Details sha1_digest() is a convenience function for objects where attributes cannot be added to apply the digest() function to its arguments. sha1_attr_digest() is a convenience function for objects where objects can be added to generate the hash. If generating hashes for objects in other packages, one of these two functions is recommended for use (typically, sha1_attr_digest() ). Extra arguments: environment: An optional extra argument for sha1.function and sha1.formula should be TRUE, FALSE or missing. sha1.function and sha1.formula will ignore the environment of the function only when environment = FALSE . Note sha1 gained an algo argument since version 0.6.15. This allows sha1() to use all hashing algorithms available in digest() . The hashes created with sha1(x) from digest >= 0.6.15 are identical to sha1(x) from digest \\<= 0.6.14. The only exceptions are hashes created with sha1(x, algo = \"sha1\") , they will be different starting from digest 0.6.15 Until version 0.6.22, sha1 ignored the attributes of the object for some classes. This was fixed in version 0.6.23. Use options(sha1PackageVersion = \"0.6.22\") to get the old behaviour. Version 0.6.24 and later ignore attributes named srcref . Author(s) Thierry Onkelinx","title":"Sha1"},{"location":"man/sha1/#calculate-a-sha1-hash-of-an-object","text":"","title":"Calculate a SHA1 hash of an object"},{"location":"man/sha1/#description","text":"Calculate a SHA1 hash of an object. The main difference with digest(x, algo = \"sha1\") is that sha1() will give the same hash on 32-bit and 64-bit systems. Note that the results depends on the setting of digits and zapsmall when handling floating point numbers. The current defaults keep digits and zapsmall as large as possible while maintaining the same hash on 32 bit and 64 bit systems.","title":"Description"},{"location":"man/sha1/#usage","text":"sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'numeric' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'complex' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'Date' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'matrix' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'data.frame' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'array' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'list' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'pairlist' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'POSIXlt' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'POSIXct' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'anova' sha1(x, digits = 4, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'function' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'formula' sha1(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class ''('' sha1(...) sha1_digest(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'NULL' sha1(...) ## S3 method for class 'name' sha1(...) sha1_attr_digest(x, digits = 14, zapsmall = 7, ..., algo = \"sha1\") ## S3 method for class 'call' sha1(...) ## S3 method for class 'character' sha1(...) ## S3 method for class 'factor' sha1(...) ## S3 method for class 'integer' sha1(...) ## S3 method for class 'logical' sha1(...) ## S3 method for class 'raw' sha1(...)","title":"Usage"},{"location":"man/sha1/#arguments","text":"x the object to calculate the SHA1 digits the approximate number of significant digits in base 10. Will be converted to a base 16 equivalent. Defaults to digits = 14 , except for sha1.anova where digits = 4 zapsmall the approximate negative magnitude of the smallest relevant digit. Will be converted to a base 2 equivalent. Values smaller than this number are equivalent to 0. Defaults to zapsmall = 7 ... If it is the only defined argument, passed to another sha1 method. If other arguments exist, see Details for usage. algo The hashing algorithm to be used by digest . Defaults to \"sha1\"","title":"Arguments"},{"location":"man/sha1/#details","text":"sha1_digest() is a convenience function for objects where attributes cannot be added to apply the digest() function to its arguments. sha1_attr_digest() is a convenience function for objects where objects can be added to generate the hash. If generating hashes for objects in other packages, one of these two functions is recommended for use (typically, sha1_attr_digest() ). Extra arguments: environment: An optional extra argument for sha1.function and sha1.formula should be TRUE, FALSE or missing. sha1.function and sha1.formula will ignore the environment of the function only when environment = FALSE .","title":"Details"},{"location":"man/sha1/#note","text":"sha1 gained an algo argument since version 0.6.15. This allows sha1() to use all hashing algorithms available in digest() . The hashes created with sha1(x) from digest >= 0.6.15 are identical to sha1(x) from digest \\<= 0.6.14. The only exceptions are hashes created with sha1(x, algo = \"sha1\") , they will be different starting from digest 0.6.15 Until version 0.6.22, sha1 ignored the attributes of the object for some classes. This was fixed in version 0.6.23. Use options(sha1PackageVersion = \"0.6.22\") to get the old behaviour. Version 0.6.24 and later ignore attributes named srcref .","title":"Note"},{"location":"man/sha1/#authors","text":"Thierry Onkelinx","title":"Author(s)"},{"location":"man/vdigest/","text":"Set a vectorised function for creating hash function digests Description The getVDigest function extends digest by allowing one to set a function that returns hash summaries as a character vector of the same length as the input. It also provides a performance advantage when repeated calls are necessary (e.g. applying a hash function repeatedly to an object). The returned function contains the same arguments as digest with the exception of the raw argument (see digest for more details). Usage getVDigest(algo=c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\", \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\", \"blake3\", \"crc32c\", \"xxh3_64\", \"xxh3_128\"), errormode=c(\"stop\",\"warn\",\"silent\")) Arguments algo The algorithms to be used; currently available choices are md5 , which is also the default, sha1 , crc32 , sha256 , sha512 , xxhash32 , xxhash64 , murmur32 , spookyhash , blake3 , crc32c , xxh3_64 , and xxh3_128 . errormode A character value denoting a choice for the behaviour in the case of error: \u2018stop\u2019 aborts (and is the default value), \u2018warn\u2019 emits a warning and returns NULL and \u2018silent\u2019 suppresses the error and returns an empty string. Details Note that since one hash summary will be returned for each element passed as input, care must be taken when determining whether or not to include the data structure as part of the object. For instance, to return the equivalent output of digest(list(\"a\")) it would be necessary to wrap the list object itself getVDigest()(list(list(\"a\"))) Value The getVDigest function returns a function for a given algorithm and error-mode. See Also digest , serialize , md5sum Examples stretch_key <- function(d, n) { md5 <- getVDigest() for (i in seq_len(n)) d <- md5(d, serialize = FALSE) d } stretch_key('abc123', 65e3) sha1 <- getVDigest(algo = 'sha1') sha1(letters) md5Input <- c(\"\", \"a\", \"abc\", \"message digest\", \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", paste(\"12345678901234567890123456789012345678901234567890123456789012\", \"345678901234567890\", sep=\"\")) md5Output <- c(\"d41d8cd98f00b204e9800998ecf8427e\", \"0cc175b9c0f1b6a831c399e269772661\", \"900150983cd24fb0d6963f7d28e17f72\", \"f96b697d7cb7938d525a2f31aaf161d0\", \"c3fcd3d76192e4007dfb496cca67e13b\", \"d174ab98d277d9f5a5611c2c9f419d9f\", \"57edf4a22be3c955ac49da2e2107b67a\") md5 <- getVDigest() stopifnot(identical(md5(md5Input, serialize = FALSE), md5Output)) stopifnot(identical(digest(list(\"abc\")), md5(list(list(\"abc\"))))) sha512Input <-c( \"\", \"The quick brown fox jumps over the lazy dog.\" ) sha512Output <- c( paste0(\"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce\", \"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\"), paste0(\"91ea1245f20d46ae9a037a989f54f1f790f0a47607eeb8a14d12890cea77a1bb\", \"c6c7ed9cf205e67b7f2b8fd4c7dfd3a7a8617e45f3c463d481c7e586c39ac1ed\") ) sha512 <- getVDigest(algo = 'sha512') stopifnot(identical(sha512(sha512Input, serialize = FALSE), sha512Output))","title":"Vdigest"},{"location":"man/vdigest/#set-a-vectorised-function-for-creating-hash-function-digests","text":"","title":"Set a vectorised function for creating hash function digests"},{"location":"man/vdigest/#description","text":"The getVDigest function extends digest by allowing one to set a function that returns hash summaries as a character vector of the same length as the input. It also provides a performance advantage when repeated calls are necessary (e.g. applying a hash function repeatedly to an object). The returned function contains the same arguments as digest with the exception of the raw argument (see digest for more details).","title":"Description"},{"location":"man/vdigest/#usage","text":"getVDigest(algo=c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\", \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\", \"blake3\", \"crc32c\", \"xxh3_64\", \"xxh3_128\"), errormode=c(\"stop\",\"warn\",\"silent\"))","title":"Usage"},{"location":"man/vdigest/#arguments","text":"algo The algorithms to be used; currently available choices are md5 , which is also the default, sha1 , crc32 , sha256 , sha512 , xxhash32 , xxhash64 , murmur32 , spookyhash , blake3 , crc32c , xxh3_64 , and xxh3_128 . errormode A character value denoting a choice for the behaviour in the case of error: \u2018stop\u2019 aborts (and is the default value), \u2018warn\u2019 emits a warning and returns NULL and \u2018silent\u2019 suppresses the error and returns an empty string.","title":"Arguments"},{"location":"man/vdigest/#details","text":"Note that since one hash summary will be returned for each element passed as input, care must be taken when determining whether or not to include the data structure as part of the object. For instance, to return the equivalent output of digest(list(\"a\")) it would be necessary to wrap the list object itself getVDigest()(list(list(\"a\")))","title":"Details"},{"location":"man/vdigest/#value","text":"The getVDigest function returns a function for a given algorithm and error-mode.","title":"Value"},{"location":"man/vdigest/#see-also","text":"digest , serialize , md5sum","title":"See Also"},{"location":"man/vdigest/#examples","text":"stretch_key <- function(d, n) { md5 <- getVDigest() for (i in seq_len(n)) d <- md5(d, serialize = FALSE) d } stretch_key('abc123', 65e3) sha1 <- getVDigest(algo = 'sha1') sha1(letters) md5Input <- c(\"\", \"a\", \"abc\", \"message digest\", \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", paste(\"12345678901234567890123456789012345678901234567890123456789012\", \"345678901234567890\", sep=\"\")) md5Output <- c(\"d41d8cd98f00b204e9800998ecf8427e\", \"0cc175b9c0f1b6a831c399e269772661\", \"900150983cd24fb0d6963f7d28e17f72\", \"f96b697d7cb7938d525a2f31aaf161d0\", \"c3fcd3d76192e4007dfb496cca67e13b\", \"d174ab98d277d9f5a5611c2c9f419d9f\", \"57edf4a22be3c955ac49da2e2107b67a\") md5 <- getVDigest() stopifnot(identical(md5(md5Input, serialize = FALSE), md5Output)) stopifnot(identical(digest(list(\"abc\")), md5(list(list(\"abc\"))))) sha512Input <-c( \"\", \"The quick brown fox jumps over the lazy dog.\" ) sha512Output <- c( paste0(\"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce\", \"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\"), paste0(\"91ea1245f20d46ae9a037a989f54f1f790f0a47607eeb8a14d12890cea77a1bb\", \"c6c7ed9cf205e67b7f2b8fd4c7dfd3a7a8617e45f3c463d481c7e586c39ac1ed\") ) sha512 <- getVDigest(algo = 'sha512') stopifnot(identical(sha512(sha512Input, serialize = FALSE), sha512Output))","title":"Examples"}]}